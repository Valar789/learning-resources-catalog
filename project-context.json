[
  {
    "path": "docker-compose.yml",
    "content": "version: '3'\r\n\r\nservices:\r\n  postgres:\r\n    image: postgres:15\r\n    restart: always\r\n    ports:\r\n      - \"5432:5432\"\r\n    environment:\r\n      POSTGRES_USER: strapi\r\n      POSTGRES_PASSWORD: strapi\r\n      POSTGRES_DB: strapi\r\n    volumes:\r\n      - ./postgres-data:/var/lib/postgresql/data\r\n\r\n  strapi:\r\n    build: ./strapi-cms\r\n    ports:\r\n      - \"1337:1337\"\r\n    volumes:\r\n      - ./strapi-cms:/app\r\n      - /app/node_modules\r\n    environment:\r\n      - NODE_ENV=development\r\n      - DATABASE_CLIENT=postgres\r\n      - DATABASE_HOST=postgres\r\n      - DATABASE_PORT=5432\r\n      - DATABASE_NAME=strapi\r\n      - DATABASE_USERNAME=strapi\r\n      - DATABASE_PASSWORD=strapi\r\n    depends_on:\r\n      - postgres\r\n\r\n  nextjs:\r\n    build: ./next-frontend\r\n    ports:\r\n      - \"3000:3000\"\r\n    volumes:\r\n      - ./next-frontend:/app\r\n      - /app/node_modules\r\n    depends_on:\r\n      - strapi\r\n      - favorites-service\r\n\r\n  favorites-service:\r\n    build: ./nest-favorites-service\r\n    ports:\r\n      - \"3001:3001\"\r\n    volumes:\r\n      - ./nest-favorites-service:/app\r\n      - /app/node_modules\r\n"
  },
  {
    "path": "nest-favorites-service/dist/app.controller.d.ts",
    "content": "import { AppService } from './app.service';\nexport declare class AppController {\n    private readonly appService;\n    constructor(appService: AppService);\n    getHello(): string;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/app.controller.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppController = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst app_service_1 = require(\"./app.service\");\nlet AppController = class AppController {\n    appService;\n    constructor(appService) {\n        this.appService = appService;\n    }\n    getHello() {\n        return this.appService.getHello();\n    }\n};\nexports.AppController = AppController;\n__decorate([\n    (0, common_1.Get)(),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", []),\n    __metadata(\"design:returntype\", String)\n], AppController.prototype, \"getHello\", null);\nexports.AppController = AppController = __decorate([\n    (0, common_1.Controller)(),\n    __metadata(\"design:paramtypes\", [app_service_1.AppService])\n], AppController);\n//# sourceMappingURL=app.controller.js.map"
  },
  {
    "path": "nest-favorites-service/dist/app.module.d.ts",
    "content": "export declare class AppModule {\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/app.module.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppModule = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst app_controller_1 = require(\"./app.controller\");\nconst app_service_1 = require(\"./app.service\");\nconst favorites_module_1 = require(\"./favorites/favorites.module\");\nlet AppModule = class AppModule {\n};\nexports.AppModule = AppModule;\nexports.AppModule = AppModule = __decorate([\n    (0, common_1.Module)({\n        imports: [favorites_module_1.FavoritesModule],\n        controllers: [app_controller_1.AppController],\n        providers: [app_service_1.AppService],\n    })\n], AppModule);\n//# sourceMappingURL=app.module.js.map"
  },
  {
    "path": "nest-favorites-service/dist/app.service.d.ts",
    "content": "export declare class AppService {\n    getHello(): string;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/app.service.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppService = void 0;\nconst common_1 = require(\"@nestjs/common\");\nlet AppService = class AppService {\n    getHello() {\n        return 'Hello World!';\n    }\n};\nexports.AppService = AppService;\nexports.AppService = AppService = __decorate([\n    (0, common_1.Injectable)()\n], AppService);\n//# sourceMappingURL=app.service.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/dto/create-favorite.dto.d.ts",
    "content": "export declare class CreateFavoriteDto {\n    resourceId: string;\n    userId?: string;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/dto/create-favorite.dto.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.CreateFavoriteDto = void 0;\nconst class_validator_1 = require(\"class-validator\");\nconst swagger_1 = require(\"@nestjs/swagger\");\nclass CreateFavoriteDto {\n    resourceId;\n    userId;\n}\nexports.CreateFavoriteDto = CreateFavoriteDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: 'ID of the resource to be marked as favorite',\n        example: '1',\n    }),\n    (0, class_validator_1.IsNotEmpty)(),\n    (0, class_validator_1.IsString)(),\n    __metadata(\"design:type\", String)\n], CreateFavoriteDto.prototype, \"resourceId\", void 0);\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: 'ID of the user marking the resource as favorite',\n        example: 'testUser123',\n        required: false,\n    }),\n    (0, class_validator_1.IsString)(),\n    __metadata(\"design:type\", String)\n], CreateFavoriteDto.prototype, \"userId\", void 0);\n//# sourceMappingURL=create-favorite.dto.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/dto/favorite-query.dto.d.ts",
    "content": "export declare class FavoriteQueryDto {\n    userId?: string;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/dto/favorite-query.dto.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FavoriteQueryDto = void 0;\nconst class_validator_1 = require(\"class-validator\");\nconst swagger_1 = require(\"@nestjs/swagger\");\nclass FavoriteQueryDto {\n    userId;\n}\nexports.FavoriteQueryDto = FavoriteQueryDto;\n__decorate([\n    (0, swagger_1.ApiProperty)({\n        description: 'ID of the user to filter favorites',\n        example: 'testUser123',\n        required: false,\n    }),\n    (0, class_validator_1.IsOptional)(),\n    (0, class_validator_1.IsString)(),\n    __metadata(\"design:type\", String)\n], FavoriteQueryDto.prototype, \"userId\", void 0);\n//# sourceMappingURL=favorite-query.dto.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.controller.d.ts",
    "content": "import { FavoritesService } from './favorites.service';\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\nimport { FavoriteQueryDto } from './dto/favorite-query.dto';\nimport { Favorite } from './interfaces/favorite.interface';\nexport declare class FavoritesController {\n    private favoritesService;\n    constructor(favoritesService: FavoritesService);\n    addFavorite(createFavoriteDto: CreateFavoriteDto): Favorite;\n    getFavorites(query: FavoriteQueryDto): Favorite[];\n    checkFavorite(resourceId: string, userId?: string): Favorite;\n    removeFavorite(id: string): void;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.controller.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nvar __metadata = (this && this.__metadata) || function (k, v) {\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\nvar __param = (this && this.__param) || function (paramIndex, decorator) {\n    return function (target, key) { decorator(target, key, paramIndex); }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FavoritesController = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst swagger_1 = require(\"@nestjs/swagger\");\nconst favorites_service_1 = require(\"./favorites.service\");\nconst create_favorite_dto_1 = require(\"./dto/create-favorite.dto\");\nconst favorite_query_dto_1 = require(\"./dto/favorite-query.dto\");\nlet FavoritesController = class FavoritesController {\n    favoritesService;\n    constructor(favoritesService) {\n        this.favoritesService = favoritesService;\n    }\n    addFavorite(createFavoriteDto) {\n        return this.favoritesService.addFavorite(createFavoriteDto.resourceId, createFavoriteDto.userId);\n    }\n    getFavorites(query) {\n        return this.favoritesService.getFavorites(query.userId);\n    }\n    checkFavorite(resourceId, userId) {\n        const favorite = this.favoritesService.getFavoriteByResourceId(resourceId, userId);\n        if (!favorite) {\n            throw new common_1.NotFoundException('Resource not found in favorites');\n        }\n        return favorite;\n    }\n    removeFavorite(id) {\n        const deleted = this.favoritesService.removeFavorite(id);\n        if (!deleted) {\n            throw new common_1.NotFoundException('Favorite not found');\n        }\n    }\n};\nexports.FavoritesController = FavoritesController;\n__decorate([\n    (0, common_1.Post)(),\n    (0, swagger_1.ApiOperation)({ summary: 'Add a resource to favorites' }),\n    (0, swagger_1.ApiResponse)({ status: 201, description: 'Resource added to favorites' }),\n    __param(0, (0, common_1.Body)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [create_favorite_dto_1.CreateFavoriteDto]),\n    __metadata(\"design:returntype\", Object)\n], FavoritesController.prototype, \"addFavorite\", null);\n__decorate([\n    (0, common_1.Get)(),\n    (0, swagger_1.ApiOperation)({ summary: 'Get all favorites for a user' }),\n    (0, swagger_1.ApiResponse)({ status: 200, description: 'List of favorites' }),\n    (0, swagger_1.ApiQuery)({ name: 'userId', required: false, type: String }),\n    __param(0, (0, common_1.Query)()),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [favorite_query_dto_1.FavoriteQueryDto]),\n    __metadata(\"design:returntype\", Array)\n], FavoritesController.prototype, \"getFavorites\", null);\n__decorate([\n    (0, common_1.Get)('resource/:resourceId'),\n    (0, swagger_1.ApiOperation)({ summary: 'Check if a resource is favorite' }),\n    (0, swagger_1.ApiResponse)({ status: 200, description: 'Favorite found' }),\n    (0, swagger_1.ApiResponse)({ status: 404, description: 'Resource not in favorites' }),\n    (0, swagger_1.ApiParam)({ name: 'resourceId', type: String }),\n    (0, swagger_1.ApiQuery)({ name: 'userId', required: false, type: String }),\n    __param(0, (0, common_1.Param)('resourceId')),\n    __param(1, (0, common_1.Query)('userId')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String, String]),\n    __metadata(\"design:returntype\", Object)\n], FavoritesController.prototype, \"checkFavorite\", null);\n__decorate([\n    (0, common_1.Delete)(':id'),\n    (0, swagger_1.ApiOperation)({ summary: 'Remove a resource from favorites' }),\n    (0, swagger_1.ApiResponse)({ status: 204, description: 'Resource removed from favorites' }),\n    (0, swagger_1.ApiResponse)({ status: 404, description: 'Favorite not found' }),\n    (0, swagger_1.ApiParam)({ name: 'id', type: String }),\n    (0, common_1.HttpCode)(common_1.HttpStatus.NO_CONTENT),\n    __param(0, (0, common_1.Param)('id')),\n    __metadata(\"design:type\", Function),\n    __metadata(\"design:paramtypes\", [String]),\n    __metadata(\"design:returntype\", void 0)\n], FavoritesController.prototype, \"removeFavorite\", null);\nexports.FavoritesController = FavoritesController = __decorate([\n    (0, swagger_1.ApiTags)('favorites'),\n    (0, common_1.Controller)('favorites'),\n    __metadata(\"design:paramtypes\", [favorites_service_1.FavoritesService])\n], FavoritesController);\n//# sourceMappingURL=favorites.controller.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.module.d.ts",
    "content": "export declare class FavoritesModule {\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.module.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FavoritesModule = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst favorites_controller_1 = require(\"./favorites.controller\");\nconst favorites_service_1 = require(\"./favorites.service\");\nlet FavoritesModule = class FavoritesModule {\n};\nexports.FavoritesModule = FavoritesModule;\nexports.FavoritesModule = FavoritesModule = __decorate([\n    (0, common_1.Module)({\n        controllers: [favorites_controller_1.FavoritesController],\n        providers: [favorites_service_1.FavoritesService]\n    })\n], FavoritesModule);\n//# sourceMappingURL=favorites.module.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.service.d.ts",
    "content": "import { Favorite } from './interfaces/favorite.interface';\nexport declare class FavoritesService {\n    private favorites;\n    private DEFAULT_USER;\n    addFavorite(resourceId: string, userId?: string): Favorite;\n    removeFavorite(id: string): boolean;\n    getFavorites(userId?: string): Favorite[];\n    isFavorite(resourceId: string, userId?: string): boolean;\n    getFavoriteByResourceId(resourceId: string, userId?: string): Favorite | undefined;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/favorites.service.js",
    "content": "\"use strict\";\nvar __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FavoritesService = void 0;\nconst common_1 = require(\"@nestjs/common\");\nconst uuid_1 = require(\"uuid\");\nlet FavoritesService = class FavoritesService {\n    favorites = new Map();\n    DEFAULT_USER = 'testUser123';\n    addFavorite(resourceId, userId = this.DEFAULT_USER) {\n        const id = (0, uuid_1.v4)();\n        const favorite = {\n            id,\n            resourceId,\n            userId,\n            createdAt: new Date(),\n        };\n        this.favorites.set(id, favorite);\n        return favorite;\n    }\n    removeFavorite(id) {\n        return this.favorites.delete(id);\n    }\n    getFavorites(userId = this.DEFAULT_USER) {\n        return Array.from(this.favorites.values()).filter(favorite => favorite.userId === userId);\n    }\n    isFavorite(resourceId, userId = this.DEFAULT_USER) {\n        return Array.from(this.favorites.values()).some(favorite => favorite.resourceId === resourceId && favorite.userId === userId);\n    }\n    getFavoriteByResourceId(resourceId, userId = this.DEFAULT_USER) {\n        return Array.from(this.favorites.values()).find(favorite => favorite.resourceId === resourceId && favorite.userId === userId);\n    }\n};\nexports.FavoritesService = FavoritesService;\nexports.FavoritesService = FavoritesService = __decorate([\n    (0, common_1.Injectable)()\n], FavoritesService);\n//# sourceMappingURL=favorites.service.js.map"
  },
  {
    "path": "nest-favorites-service/dist/favorites/interfaces/favorite.interface.d.ts",
    "content": "export interface Favorite {\n    id: string;\n    resourceId: string;\n    userId: string;\n    createdAt: Date;\n}\n"
  },
  {
    "path": "nest-favorites-service/dist/favorites/interfaces/favorite.interface.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\n//# sourceMappingURL=favorite.interface.js.map"
  },
  {
    "path": "nest-favorites-service/dist/main.d.ts",
    "content": "export {};\n"
  },
  {
    "path": "nest-favorites-service/dist/main.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst core_1 = require(\"@nestjs/core\");\nconst app_module_1 = require(\"./app.module\");\nconst common_1 = require(\"@nestjs/common\");\nconst swagger_1 = require(\"@nestjs/swagger\");\nasync function bootstrap() {\n    const app = await core_1.NestFactory.create(app_module_1.AppModule);\n    app.enableCors({\n        origin: ['http://localhost:3000', 'http://localhost:1337'],\n        methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\n        credentials: true,\n    });\n    const config = new swagger_1.DocumentBuilder()\n        .setTitle('Favorites API')\n        .setDescription('API for managing favorite learning resources')\n        .setVersion('1.0')\n        .build();\n    const document = swagger_1.SwaggerModule.createDocument(app, config);\n    swagger_1.SwaggerModule.setup('api', app, document);\n    app.useGlobalPipes(new common_1.ValidationPipe());\n    await app.listen(3001);\n}\nbootstrap();\n//# sourceMappingURL=main.js.map"
  },
  {
    "path": "nest-favorites-service/nest-cli.json",
    "content": "{\r\n  \"$schema\": \"https://json.schemastore.org/nest-cli\",\r\n  \"collection\": \"@nestjs/schematics\",\r\n  \"sourceRoot\": \"src\",\r\n  \"compilerOptions\": {\r\n    \"deleteOutDir\": true\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/package.json",
    "content": "{\r\n  \"name\": \"nest-favorites-service\",\r\n  \"version\": \"0.0.1\",\r\n  \"description\": \"\",\r\n  \"author\": \"\",\r\n  \"private\": true,\r\n  \"license\": \"UNLICENSED\",\r\n  \"scripts\": {\r\n    \"build\": \"nest build\",\r\n    \"format\": \"prettier --write \\\"src/**/*.ts\\\" \\\"test/**/*.ts\\\"\",\r\n    \"start\": \"nest start\",\r\n    \"start:dev\": \"nest start --watch\",\r\n    \"start:debug\": \"nest start --debug --watch\",\r\n    \"start:prod\": \"node dist/main\",\r\n    \"lint\": \"eslint \\\"{src,apps,libs,test}/**/*.ts\\\" --fix\",\r\n    \"test\": \"jest\",\r\n    \"test:watch\": \"jest --watch\",\r\n    \"test:cov\": \"jest --coverage\",\r\n    \"test:debug\": \"node --inspect-brk -r tsconfig-paths/register -r ts-node/register node_modules/.bin/jest --runInBand\",\r\n    \"test:e2e\": \"jest --config ./test/jest-e2e.json\"\r\n  },\r\n  \"dependencies\": {\r\n    \"@nestjs/common\": \"^11.0.1\",\r\n    \"@nestjs/core\": \"^11.0.1\",\r\n    \"@nestjs/platform-express\": \"^11.0.1\",\r\n    \"@nestjs/swagger\": \"^11.1.5\",\r\n    \"class-transformer\": \"^0.5.1\",\r\n    \"class-validator\": \"^0.14.1\",\r\n    \"reflect-metadata\": \"^0.2.2\",\r\n    \"rxjs\": \"^7.8.1\",\r\n    \"swagger-ui-express\": \"^5.0.1\",\r\n    \"uuid\": \"^11.1.0\"\r\n  },\r\n  \"devDependencies\": {\r\n    \"@eslint/eslintrc\": \"^3.2.0\",\r\n    \"@eslint/js\": \"^9.18.0\",\r\n    \"@nestjs/cli\": \"^11.0.0\",\r\n    \"@nestjs/schematics\": \"^11.0.0\",\r\n    \"@nestjs/testing\": \"^11.0.1\",\r\n    \"@swc/cli\": \"^0.6.0\",\r\n    \"@swc/core\": \"^1.10.7\",\r\n    \"@types/express\": \"^5.0.0\",\r\n    \"@types/jest\": \"^29.5.14\",\r\n    \"@types/node\": \"^22.10.7\",\r\n    \"@types/supertest\": \"^6.0.2\",\r\n    \"@types/uuid\": \"^10.0.0\",\r\n    \"eslint\": \"^9.18.0\",\r\n    \"eslint-config-prettier\": \"^10.0.1\",\r\n    \"eslint-plugin-prettier\": \"^5.2.2\",\r\n    \"globals\": \"^16.0.0\",\r\n    \"jest\": \"^29.7.0\",\r\n    \"prettier\": \"^3.4.2\",\r\n    \"source-map-support\": \"^0.5.21\",\r\n    \"supertest\": \"^7.0.0\",\r\n    \"ts-jest\": \"^29.2.5\",\r\n    \"ts-loader\": \"^9.5.2\",\r\n    \"ts-node\": \"^10.9.2\",\r\n    \"tsconfig-paths\": \"^4.2.0\",\r\n    \"typescript\": \"^5.7.3\",\r\n    \"typescript-eslint\": \"^8.20.0\"\r\n  },\r\n  \"jest\": {\r\n    \"moduleFileExtensions\": [\r\n      \"js\",\r\n      \"json\",\r\n      \"ts\"\r\n    ],\r\n    \"rootDir\": \"src\",\r\n    \"testRegex\": \".*\\\\.spec\\\\.ts$\",\r\n    \"transform\": {\r\n      \"^.+\\\\.(t|j)s$\": \"ts-jest\"\r\n    },\r\n    \"collectCoverageFrom\": [\r\n      \"**/*.(t|j)s\"\r\n    ],\r\n    \"coverageDirectory\": \"../coverage\",\r\n    \"testEnvironment\": \"node\"\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/README.md",
    "content": "<p align=\"center\">\r\n  <a href=\"http://nestjs.com/\" target=\"blank\"><img src=\"https://nestjs.com/img/logo-small.svg\" width=\"120\" alt=\"Nest Logo\" /></a>\r\n</p>\r\n\r\n[circleci-image]: https://img.shields.io/circleci/build/github/nestjs/nest/master?token=abc123def456\r\n[circleci-url]: https://circleci.com/gh/nestjs/nest\r\n\r\n  <p align=\"center\">A progressive <a href=\"http://nodejs.org\" target=\"_blank\">Node.js</a> framework for building efficient and scalable server-side applications.</p>\r\n    <p align=\"center\">\r\n<a href=\"https://www.npmjs.com/~nestjscore\" target=\"_blank\"><img src=\"https://img.shields.io/npm/v/@nestjs/core.svg\" alt=\"NPM Version\" /></a>\r\n<a href=\"https://www.npmjs.com/~nestjscore\" target=\"_blank\"><img src=\"https://img.shields.io/npm/l/@nestjs/core.svg\" alt=\"Package License\" /></a>\r\n<a href=\"https://www.npmjs.com/~nestjscore\" target=\"_blank\"><img src=\"https://img.shields.io/npm/dm/@nestjs/common.svg\" alt=\"NPM Downloads\" /></a>\r\n<a href=\"https://circleci.com/gh/nestjs/nest\" target=\"_blank\"><img src=\"https://img.shields.io/circleci/build/github/nestjs/nest/master\" alt=\"CircleCI\" /></a>\r\n<a href=\"https://discord.gg/G7Qnnhy\" target=\"_blank\"><img src=\"https://img.shields.io/badge/discord-online-brightgreen.svg\" alt=\"Discord\"/></a>\r\n<a href=\"https://opencollective.com/nest#backer\" target=\"_blank\"><img src=\"https://opencollective.com/nest/backers/badge.svg\" alt=\"Backers on Open Collective\" /></a>\r\n<a href=\"https://opencollective.com/nest#sponsor\" target=\"_blank\"><img src=\"https://opencollective.com/nest/sponsors/badge.svg\" alt=\"Sponsors on Open Collective\" /></a>\r\n  <a href=\"https://paypal.me/kamilmysliwiec\" target=\"_blank\"><img src=\"https://img.shields.io/badge/Donate-PayPal-ff3f59.svg\" alt=\"Donate us\"/></a>\r\n    <a href=\"https://opencollective.com/nest#sponsor\"  target=\"_blank\"><img src=\"https://img.shields.io/badge/Support%20us-Open%20Collective-41B883.svg\" alt=\"Support us\"></a>\r\n  <a href=\"https://twitter.com/nestframework\" target=\"_blank\"><img src=\"https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow\" alt=\"Follow us on Twitter\"></a>\r\n</p>\r\n  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)\r\n  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->\r\n\r\n## Description\r\n\r\n[Nest](https://github.com/nestjs/nest) framework TypeScript starter repository.\r\n\r\n## Project setup\r\n\r\n```bash\r\n$ npm install\r\n```\r\n\r\n## Compile and run the project\r\n\r\n```bash\r\n# development\r\n$ npm run start\r\n\r\n# watch mode\r\n$ npm run start:dev\r\n\r\n# production mode\r\n$ npm run start:prod\r\n```\r\n\r\n## Run tests\r\n\r\n```bash\r\n# unit tests\r\n$ npm run test\r\n\r\n# e2e tests\r\n$ npm run test:e2e\r\n\r\n# test coverage\r\n$ npm run test:cov\r\n```\r\n\r\n## Deployment\r\n\r\nWhen you're ready to deploy your NestJS application to production, there are some key steps you can take to ensure it runs as efficiently as possible. Check out the [deployment documentation](https://docs.nestjs.com/deployment) for more information.\r\n\r\nIf you are looking for a cloud-based platform to deploy your NestJS application, check out [Mau](https://mau.nestjs.com), our official platform for deploying NestJS applications on AWS. Mau makes deployment straightforward and fast, requiring just a few simple steps:\r\n\r\n```bash\r\n$ npm install -g @nestjs/mau\r\n$ mau deploy\r\n```\r\n\r\nWith Mau, you can deploy your application in just a few clicks, allowing you to focus on building features rather than managing infrastructure.\r\n\r\n## Resources\r\n\r\nCheck out a few resources that may come in handy when working with NestJS:\r\n\r\n- Visit the [NestJS Documentation](https://docs.nestjs.com) to learn more about the framework.\r\n- For questions and support, please visit our [Discord channel](https://discord.gg/G7Qnnhy).\r\n- To dive deeper and get more hands-on experience, check out our official video [courses](https://courses.nestjs.com/).\r\n- Deploy your application to AWS with the help of [NestJS Mau](https://mau.nestjs.com) in just a few clicks.\r\n- Visualize your application graph and interact with the NestJS application in real-time using [NestJS Devtools](https://devtools.nestjs.com).\r\n- Need help with your project (part-time to full-time)? Check out our official [enterprise support](https://enterprise.nestjs.com).\r\n- To stay in the loop and get updates, follow us on [X](https://x.com/nestframework) and [LinkedIn](https://linkedin.com/company/nestjs).\r\n- Looking for a job, or have a job to offer? Check out our official [Jobs board](https://jobs.nestjs.com).\r\n\r\n## Support\r\n\r\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).\r\n\r\n## Stay in touch\r\n\r\n- Author - [Kamil Myśliwiec](https://twitter.com/kammysliwiec)\r\n- Website - [https://nestjs.com](https://nestjs.com/)\r\n- Twitter - [@nestframework](https://twitter.com/nestframework)\r\n\r\n## License\r\n\r\nNest is [MIT licensed](https://github.com/nestjs/nest/blob/master/LICENSE).\r\n"
  },
  {
    "path": "nest-favorites-service/src/app.controller.spec.ts",
    "content": "import { Test, TestingModule } from '@nestjs/testing';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\n\r\ndescribe('AppController', () => {\r\n  let appController: AppController;\r\n\r\n  beforeEach(async () => {\r\n    const app: TestingModule = await Test.createTestingModule({\r\n      controllers: [AppController],\r\n      providers: [AppService],\r\n    }).compile();\r\n\r\n    appController = app.get<AppController>(AppController);\r\n  });\r\n\r\n  describe('root', () => {\r\n    it('should return \"Hello World!\"', () => {\r\n      expect(appController.getHello()).toBe('Hello World!');\r\n    });\r\n  });\r\n});\r\n"
  },
  {
    "path": "nest-favorites-service/src/app.controller.ts",
    "content": "import { Controller, Get } from '@nestjs/common';\r\nimport { AppService } from './app.service';\r\n\r\n@Controller()\r\nexport class AppController {\r\n  constructor(private readonly appService: AppService) {}\r\n\r\n  @Get()\r\n  getHello(): string {\r\n    return this.appService.getHello();\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/app.module.ts",
    "content": "import { Module } from '@nestjs/common';\r\nimport { AppController } from './app.controller';\r\nimport { AppService } from './app.service';\r\nimport { FavoritesModule } from './favorites/favorites.module';\n\r\n@Module({\r\n  imports: [FavoritesModule],\r\n  controllers: [AppController],\r\n  providers: [AppService],\r\n})\r\nexport class AppModule {}\r\n"
  },
  {
    "path": "nest-favorites-service/src/app.service.ts",
    "content": "import { Injectable } from '@nestjs/common';\r\n\r\n@Injectable()\r\nexport class AppService {\r\n  getHello(): string {\r\n    return 'Hello World!';\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/dto/create-favorite.dto.ts",
    "content": "import { IsNotEmpty, IsString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class CreateFavoriteDto {\r\n  @ApiProperty({\r\n    description: 'ID of the resource to be marked as favorite',\r\n    example: '1',\r\n  })\r\n  @IsNotEmpty()\r\n  @IsString()\r\n  resourceId: string;\r\n\r\n  @ApiProperty({\r\n    description: 'ID of the user marking the resource as favorite',\r\n    example: 'testUser123',\r\n    required: false,\r\n  })\r\n  @IsString()\r\n  userId?: string;\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/dto/favorite-query.dto.ts",
    "content": "import { IsOptional, IsString } from 'class-validator';\r\nimport { ApiProperty } from '@nestjs/swagger';\r\n\r\nexport class FavoriteQueryDto {\r\n  @ApiProperty({\r\n    description: 'ID of the user to filter favorites',\r\n    example: 'testUser123',\r\n    required: false,\r\n  })\r\n  @IsOptional()\r\n  @IsString()\r\n  userId?: string;\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/favorites.controller.spec.ts",
    "content": "import { Test, TestingModule } from '@nestjs/testing';\r\nimport { FavoritesController } from './favorites.controller';\r\n\r\ndescribe('FavoritesController', () => {\r\n  let controller: FavoritesController;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      controllers: [FavoritesController],\r\n    }).compile();\r\n\r\n    controller = module.get<FavoritesController>(FavoritesController);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(controller).toBeDefined();\r\n  });\r\n});\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/favorites.controller.ts",
    "content": "import { Controller, Get, Post, Delete, Param, Body, Query, NotFoundException, HttpStatus, HttpCode } from '@nestjs/common';\r\nimport { ApiTags, ApiOperation, ApiResponse, ApiParam, ApiQuery } from '@nestjs/swagger';\r\nimport { FavoritesService } from './favorites.service';\r\nimport { CreateFavoriteDto } from './dto/create-favorite.dto';\r\nimport { FavoriteQueryDto } from './dto/favorite-query.dto';\r\nimport { Favorite } from './interfaces/favorite.interface';\r\n\r\n@ApiTags('favorites')\r\n@Controller('favorites')\r\nexport class FavoritesController {\r\n  constructor(private favoritesService: FavoritesService) {}\r\n\r\n  @Post()\r\n  @ApiOperation({ summary: 'Add a resource to favorites' })\r\n  @ApiResponse({ status: 201, description: 'Resource added to favorites' })\r\n  addFavorite(@Body() createFavoriteDto: CreateFavoriteDto): Favorite {\r\n    return this.favoritesService.addFavorite(\r\n      createFavoriteDto.resourceId,\r\n      createFavoriteDto.userId,\r\n    );\r\n  }\r\n\r\n  @Get()\r\n  @ApiOperation({ summary: 'Get all favorites for a user' })\r\n  @ApiResponse({ status: 200, description: 'List of favorites' })\r\n  @ApiQuery({ name: 'userId', required: false, type: String })\r\n  getFavorites(@Query() query: FavoriteQueryDto): Favorite[] {\r\n    return this.favoritesService.getFavorites(query.userId);\r\n  }\r\n\r\n  @Get('resource/:resourceId')\r\n  @ApiOperation({ summary: 'Check if a resource is favorite' })\r\n  @ApiResponse({ status: 200, description: 'Favorite found' })\r\n  @ApiResponse({ status: 404, description: 'Resource not in favorites' })\r\n  @ApiParam({ name: 'resourceId', type: String })\r\n  @ApiQuery({ name: 'userId', required: false, type: String })\r\n  checkFavorite(\r\n    @Param('resourceId') resourceId: string,\r\n    @Query('userId') userId?: string,\r\n  ): Favorite {\r\n    const favorite = this.favoritesService.getFavoriteByResourceId(resourceId, userId);\r\n    if (!favorite) {\r\n      throw new NotFoundException('Resource not found in favorites');\r\n    }\r\n    return favorite;\r\n  }\r\n\r\n  @Delete(':id')\r\n  @ApiOperation({ summary: 'Remove a resource from favorites' })\r\n  @ApiResponse({ status: 204, description: 'Resource removed from favorites' })\r\n  @ApiResponse({ status: 404, description: 'Favorite not found' })\r\n  @ApiParam({ name: 'id', type: String })\r\n  @HttpCode(HttpStatus.NO_CONTENT)\r\n  removeFavorite(@Param('id') id: string): void {\r\n    const deleted = this.favoritesService.removeFavorite(id);\r\n    if (!deleted) {\r\n      throw new NotFoundException('Favorite not found');\r\n    }\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/favorites.module.ts",
    "content": "import { Module } from '@nestjs/common';\r\nimport { FavoritesController } from './favorites.controller';\nimport { FavoritesService } from './favorites.service';\n\r\n@Module({\n  controllers: [FavoritesController],\n  providers: [FavoritesService]\n})\r\nexport class FavoritesModule {}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/favorites.service.spec.ts",
    "content": "import { Test, TestingModule } from '@nestjs/testing';\r\nimport { FavoritesService } from './favorites.service';\r\n\r\ndescribe('FavoritesService', () => {\r\n  let service: FavoritesService;\r\n\r\n  beforeEach(async () => {\r\n    const module: TestingModule = await Test.createTestingModule({\r\n      providers: [FavoritesService],\r\n    }).compile();\r\n\r\n    service = module.get<FavoritesService>(FavoritesService);\r\n  });\r\n\r\n  it('should be defined', () => {\r\n    expect(service).toBeDefined();\r\n  });\r\n});\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/favorites.service.ts",
    "content": "import { Injectable } from '@nestjs/common';\r\nimport { Favorite } from './interfaces/favorite.interface';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n@Injectable()\r\nexport class FavoritesService {\r\n  private favorites: Map<string, Favorite> = new Map();\r\n  private DEFAULT_USER = 'testUser123';\r\n\r\n  addFavorite(resourceId: string, userId: string = this.DEFAULT_USER): Favorite {\r\n    const id = uuidv4();\r\n    const favorite: Favorite = {\r\n      id,\r\n      resourceId,\r\n      userId,\r\n      createdAt: new Date(),\r\n    };\r\n    \r\n    this.favorites.set(id, favorite);\r\n    return favorite;\r\n  }\r\n\r\n  removeFavorite(id: string): boolean {\r\n    return this.favorites.delete(id);\r\n  }\r\n\r\n  getFavorites(userId: string = this.DEFAULT_USER): Favorite[] {\r\n    return Array.from(this.favorites.values()).filter(\r\n      favorite => favorite.userId === userId\r\n    );\r\n  }\r\n\r\n  isFavorite(resourceId: string, userId: string = this.DEFAULT_USER): boolean {\r\n    return Array.from(this.favorites.values()).some(\r\n      favorite => favorite.resourceId === resourceId && favorite.userId === userId\r\n    );\r\n  }\r\n\r\n  getFavoriteByResourceId(resourceId: string, userId: string = this.DEFAULT_USER): Favorite | undefined {\r\n    return Array.from(this.favorites.values()).find(\r\n      favorite => favorite.resourceId === resourceId && favorite.userId === userId\r\n    );\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/src/favorites/interfaces/favorite.interface.ts",
    "content": "export interface Favorite {\r\n    id: string;\r\n    resourceId: string;\r\n    userId: string;\r\n    createdAt: Date;\r\n  }\r\n  "
  },
  {
    "path": "nest-favorites-service/src/main.ts",
    "content": "import { NestFactory } from '@nestjs/core';\r\nimport { AppModule } from './app.module';\r\nimport { ValidationPipe } from '@nestjs/common';\r\nimport { DocumentBuilder, SwaggerModule } from '@nestjs/swagger';\r\n\r\nasync function bootstrap() {\r\n  const app = await NestFactory.create(AppModule);\r\n  \r\n  //CORS\r\n  app.enableCors({\r\n    origin: ['http://localhost:3000', 'http://localhost:1337'],\r\n    methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',\r\n    credentials: true,\r\n  });\r\n  \r\n  //Swagger\r\n  const config = new DocumentBuilder()\r\n    .setTitle('Favorites API')\r\n    .setDescription('API for managing favorite learning resources')\r\n    .setVersion('1.0')\r\n    .build();\r\n  const document = SwaggerModule.createDocument(app, config);\r\n  SwaggerModule.setup('api', app, document);\r\n  \r\n  //Global\r\n  app.useGlobalPipes(new ValidationPipe());\r\n  \r\n  await app.listen(3001);\r\n}\r\nbootstrap();\r\n"
  },
  {
    "path": "nest-favorites-service/test/app.e2e-spec.ts",
    "content": "import { Test, TestingModule } from '@nestjs/testing';\r\nimport { INestApplication } from '@nestjs/common';\r\nimport * as request from 'supertest';\r\nimport { App } from 'supertest/types';\r\nimport { AppModule } from './../src/app.module';\r\n\r\ndescribe('AppController (e2e)', () => {\r\n  let app: INestApplication<App>;\r\n\r\n  beforeEach(async () => {\r\n    const moduleFixture: TestingModule = await Test.createTestingModule({\r\n      imports: [AppModule],\r\n    }).compile();\r\n\r\n    app = moduleFixture.createNestApplication();\r\n    await app.init();\r\n  });\r\n\r\n  it('/ (GET)', () => {\r\n    return request(app.getHttpServer())\r\n      .get('/')\r\n      .expect(200)\r\n      .expect('Hello World!');\r\n  });\r\n});\r\n"
  },
  {
    "path": "nest-favorites-service/test/jest-e2e.json",
    "content": "{\r\n  \"moduleFileExtensions\": [\"js\", \"json\", \"ts\"],\r\n  \"rootDir\": \".\",\r\n  \"testEnvironment\": \"node\",\r\n  \"testRegex\": \".e2e-spec.ts$\",\r\n  \"transform\": {\r\n    \"^.+\\\\.(t|j)s$\": \"ts-jest\"\r\n  }\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/tsconfig.build.json",
    "content": "{\r\n  \"extends\": \"./tsconfig.json\",\r\n  \"exclude\": [\"node_modules\", \"test\", \"dist\", \"**/*spec.ts\"]\r\n}\r\n"
  },
  {
    "path": "nest-favorites-service/tsconfig.json",
    "content": "{\r\n  \"compilerOptions\": {\r\n    \"module\": \"commonjs\",\r\n    \"declaration\": true,\r\n    \"removeComments\": true,\r\n    \"emitDecoratorMetadata\": true,\r\n    \"experimentalDecorators\": true,\r\n    \"allowSyntheticDefaultImports\": true,\r\n    \"target\": \"ES2023\",\r\n    \"sourceMap\": true,\r\n    \"outDir\": \"./dist\",\r\n    \"baseUrl\": \"./\",\r\n    \"incremental\": true,\r\n    \"skipLibCheck\": true,\r\n    \"strictNullChecks\": true,\r\n    \"forceConsistentCasingInFileNames\": true,\r\n    \"noImplicitAny\": false,\r\n    \"strictBindCallApply\": false,\r\n    \"noFallthroughCasesInSwitch\": false\r\n  }\r\n}\r\n"
  },
  {
    "path": "next-frontend/next-env.d.ts",
    "content": "/// <reference types=\"next\" />\n/// <reference types=\"next/image-types/global\" />\n\n// NOTE: This file should not be edited\n// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.\n"
  },
  {
    "path": "next-frontend/next.config.ts",
    "content": "import type { NextConfig } from \"next\";\n\nconst nextConfig: NextConfig = {\n  images: {\n    domains: [\"strapi\"],\n  },\n};\n\nexport default nextConfig;"
  },
  {
    "path": "next-frontend/package.json",
    "content": "{\n  \"name\": \"next-frontend\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev\",\n    \"build\": \"next build\",\n    \"start\": \"next start\",\n    \"lint\": \"next lint\"\n  },\n  \"dependencies\": {\n    \"axios\": \"^1.8.4\",\n    \"next\": \"15.3.1\",\n    \"react\": \"^19.0.0\",\n    \"react-dom\": \"^19.0.0\",\n    \"react-icons\": \"^5.5.0\"\n  },\n  \"devDependencies\": {\n    \"@eslint/eslintrc\": \"^3\",\n    \"@tailwindcss/postcss\": \"^4\",\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^19\",\n    \"@types/react-dom\": \"^19\",\n    \"eslint\": \"^9\",\n    \"eslint-config-next\": \"15.3.1\",\n    \"tailwindcss\": \"^4\",\n    \"typescript\": \"^5\"\n  }\n}\n"
  },
  {
    "path": "next-frontend/README.md",
    "content": "This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).\n\n## Getting Started\n\nFirst, run the development server:\n\n```bash\nnpm run dev\n# or\nyarn dev\n# or\npnpm dev\n# or\nbun dev\n```\n\nOpen [http://localhost:3000](http://localhost:3000) with your browser to see the result.\n\nYou can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.\n\nThis project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.\n\n## Learn More\n\nTo learn more about Next.js, take a look at the following resources:\n\n- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.\n- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.\n\nYou can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!\n\n## Deploy on Vercel\n\nThe easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.\n\nCheck out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.\n"
  },
  {
    "path": "next-frontend/src/app/favorites/page.tsx",
    "content": "\"use client\"\r\n\r\nimport { useState, useEffect } from \"react\"\r\nimport { useFavorites } from \"@/hooks/useFavorites\"\r\nimport { getResourceById } from \"@/services/strapi.service\"\r\nimport ResourceCard from \"@/components/ResourceCard\"\r\nimport type { Resource } from \"@/types/resource.types\"\r\nimport Link from \"next/link\"\r\nimport { FaHeart, FaExclamationTriangle, FaCompass, FaSync } from \"react-icons/fa\"\r\n\r\nexport default function FavoritesPage() {\r\n  const { favorites, loading, refreshFavorites } = useFavorites()\r\n  const [resources, setResources] = useState<Resource[]>([])\r\n  const [loadingResources, setLoadingResources] = useState(true)\r\n  const [error, setError] = useState<string | null>(null)\r\n  const [failedResources, setFailedResources] = useState<string[]>([])\r\n\r\n  useEffect(() => {\r\n    async function loadFavoriteResources() {\r\n      if (favorites.length > 0) {\r\n        setLoadingResources(true)\r\n        setError(null)\r\n        setFailedResources([])\r\n\r\n        try {\r\n          const failed: string[] = []\r\n          const resourcePromises = favorites.map(async (fav) => {\r\n            try {\r\n              console.log(`Fetching resource: ${fav.resourceId}`)\r\n              const resource = await getResourceById(fav.resourceId)\r\n              return resource\r\n            } catch (err) {\r\n              console.error(`Error loading resource ${fav.resourceId}:`, err)\r\n              failed.push(fav.resourceId)\r\n              return null\r\n            }\r\n          })\r\n\r\n          const results = await Promise.all(resourcePromises)\r\n          const validResources = results.filter(Boolean) as Resource[]\r\n\r\n          if (failed.length > 0) {\r\n            setFailedResources(failed)\r\n            setError(`No se pudieron cargar ${failed.length} recursos`)\r\n          }\r\n\r\n          setResources(validResources)\r\n        } catch (error) {\r\n          console.error(\"Error loading favorite resources:\", error)\r\n          setError(\"No pudimos cargar tus favoritos. Por favor, intenta de nuevo más tarde.\")\r\n        } finally {\r\n          setLoadingResources(false)\r\n        }\r\n      } else {\r\n        setResources([])\r\n        setLoadingResources(false)\r\n      }\r\n    }\r\n\r\n    if (!loading) {\r\n      loadFavoriteResources()\r\n    }\r\n  }, [favorites, loading])\r\n\r\n  const handleRetry = () => {\r\n    refreshFavorites()\r\n  }\r\n\r\n  if (loading || loadingResources) {\r\n    return (\r\n      <div className=\"animate-fade-in\">\r\n        <h1 className=\"text-3xl font-bold mb-6\">Tus Favoritos</h1>\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n          {[...Array(4)].map((_, index) => (\r\n            <div key={index} className=\"bg-white rounded-lg shadow-md overflow-hidden transition-all duration-300\">\r\n              <div className=\"h-40 bg-gray-200 animate-pulse\"></div>\r\n              <div className=\"p-4\">\r\n                <div className=\"h-6 bg-gray-200 rounded animate-pulse mb-2 w-3/4\"></div>\r\n                <div className=\"h-4 bg-gray-200 rounded animate-pulse mb-2\"></div>\r\n                <div className=\"h-4 bg-gray-200 rounded animate-pulse w-1/2\"></div>\r\n                <div className=\"mt-4 flex justify-between items-center\">\r\n                  <div className=\"h-8 bg-gray-200 rounded animate-pulse w-1/3\"></div>\r\n                  <div className=\"h-8 w-8 bg-gray-200 rounded-full animate-pulse\"></div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  if (favorites.length === 0) {\r\n    return (\r\n      <div className=\"text-center py-16 animate-fade-in\">\r\n        <h1 className=\"text-3xl font-bold mb-6\">Tus Favoritos</h1>\r\n        <div className=\"bg-gray-50 p-8 rounded-lg max-w-md mx-auto border border-gray-200 shadow-sm\">\r\n          <div className=\"flex justify-center mb-4\">\r\n            <FaHeart className=\"text-gray-300 text-5xl\" />\r\n          </div>\r\n          <h2 className=\"text-xl font-semibold mb-2\">No tienes favoritos aún</h2>\r\n          <p className=\"text-gray-600 mb-6\">\r\n            Guarda tus recursos favoritos para acceder a ellos rápidamente en cualquier momento.\r\n          </p>\r\n          <Link\r\n            href=\"/\"\r\n            className=\"bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg inline-flex items-center transition-colors duration-300\"\r\n          >\r\n            <FaCompass className=\"mr-2\" />\r\n            Explorar recursos\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"animate-fade-in\">\r\n      <h1 className=\"text-3xl font-bold mb-6\">Tus Favoritos</h1>\r\n\r\n      {error && (\r\n        <div className=\"bg-red-50 border border-red-200 rounded-lg p-4 mb-6 flex items-start\">\r\n          <FaExclamationTriangle className=\"text-red-500 mr-3 mt-0.5 flex-shrink-0\" />\r\n          <div className=\"flex-grow\">\r\n            <p className=\"text-red-700 font-medium\">{error}</p>\r\n            <p className=\"text-red-600 text-sm mt-1\">\r\n              {failedResources.length > 0\r\n                ? `No se pudieron cargar los siguientes recursos: ${failedResources.join(\", \")}`\r\n                : \"Puedes intentar recargar la página o volver más tarde.\"}\r\n            </p>\r\n          </div>\r\n          <button\r\n            onClick={handleRetry}\r\n            className=\"bg-red-100 hover:bg-red-200 text-red-700 px-3 py-1 rounded-md flex items-center text-sm transition-colors\"\r\n          >\r\n            <FaSync className=\"mr-1\" /> Reintentar\r\n          </button>\r\n        </div>\r\n      )}\r\n\r\n      {resources.length > 0 ? (\r\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\r\n          {resources.map((resource) => (\r\n            <ResourceCard key={resource.id} resource={resource} />\r\n          ))}\r\n        </div>\r\n      ) : error ? (\r\n        <div className=\"text-center py-8\">\r\n          <p className=\"text-gray-500\">No se pudieron cargar los recursos favoritos.</p>\r\n          <button\r\n            onClick={handleRetry}\r\n            className=\"mt-4 bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg inline-flex items-center transition-colors duration-300\"\r\n          >\r\n            <FaSync className=\"mr-2\" /> Intentar de nuevo\r\n          </button>\r\n        </div>\r\n      ) : null}\r\n    </div>\r\n  )\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/app/globals.css",
    "content": "@import \"tailwindcss\";\n\n:root {\n  --background: #ffffff;\n  --foreground: #171717;\n}\n\n@theme inline {\n  --color-background: var(--background);\n  --color-foreground: var(--foreground);\n  --font-sans: var(--font-geist-sans);\n  --font-mono: var(--font-geist-mono);\n}\n\n@media (prefers-color-scheme: dark) {\n  :root {\n    --background: #0a0a0a;\n    --foreground: #ededed;\n  }\n}\n\nbody {\n  background: var(--background);\n  color: var(--foreground);\n  font-family: Arial, Helvetica, sans-serif;\n}\n\n@layer utilities {\n  .text-balance {\n    text-wrap: balance;\n  }\n\n  .animate-fade-in {\n    animation: fadeIn 0.3s ease-in-out;\n  }\n\n  @keyframes fadeIn {\n    from {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    to {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  }\n}\n"
  },
  {
    "path": "next-frontend/src/app/layout.tsx",
    "content": "import \"./globals.css\";\nimport type { Metadata } from \"next\";\nimport { Inter } from \"next/font/google\";\nimport AppLayout from \"@/components/AppLayout/AppLayout\";\n\nconst inter = Inter({ subsets: [\"latin\"] });\n\nexport const metadata: Metadata = {\n  title: \"Learning Resources Catalog\",\n  description: \"A catalog for learning resources\",\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={inter.className}>\n        <AppLayout>\n          <main className=\"container mx-auto py-8 px-4\">{children}</main>\n        </AppLayout>\n      </body>\n    </html>\n  );\n}\n"
  },
  {
    "path": "next-frontend/src/app/page.tsx",
    "content": "import { getResources } from '@/services/strapi.service';\nimport ResourceCard from '@/components/ResourceCard';\n\nexport default async function HomePage() {\n  const resources = await getResources();\n\n  return (\n    <div>\n      <h1 className=\"text-3xl font-bold mb-6\">Learning Resources</h1>\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n        {resources.data.map((resource) => (\n          <ResourceCard key={resource.id} resource={resource} />\n        ))}\n      </div>\n    </div>\n  );\n}\n"
  },
  {
    "path": "next-frontend/src/app/resources/[id]/page.tsx",
    "content": "import { getResourceById, getImageUrl } from \"@/services/strapi.service\"\r\nimport Image from \"next/image\"\r\nimport FavoriteButton from \"@/components/FavoriteButton\"\r\nimport Link from \"next/link\"\r\nimport { FaArrowLeft, FaExternalLinkAlt } from \"react-icons/fa\"\r\n\r\nexport default async function ResourcePage({\r\n  params,\r\n}: {\r\n  params: Promise<{ id: string }>\r\n}) {\r\n  const { id } = await params\r\n  const resource = await getResourceById(id)\r\n\r\n  const imageUrl = resource?.coverImage?.url || resource?.coverImage?.formats?.medium?.url\r\n  const formattedImageUrl = getImageUrl(imageUrl)\r\n\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-lg overflow-hidden transition-all duration-300\">\r\n      <div className=\"p-4 bg-gray-50 border-b\">\r\n        <Link href=\"/\" className=\"flex items-center text-blue-600 hover:text-blue-800 font-medium transition-colors\">\r\n          <FaArrowLeft className=\"h-4 w-4 mr-2\" />\r\n          Back to resources\r\n        </Link>\r\n      </div>\r\n      <div className=\"relative h-64 sm:h-80\">\r\n        {imageUrl ? (\r\n          <Image\r\n            src={formattedImageUrl || \"/placeholder.svg\"}\r\n            alt={resource?.title}\r\n            fill\r\n            className=\"object-cover\"\r\n            sizes=\"(max-width: 768px) 100vw, (max-width: 1200px) 50vw, 33vw\"\r\n            priority\r\n          />\r\n        ) : (\r\n          <div className=\"w-full h-full bg-gray-200 flex items-center justify-center\">\r\n            <span className=\"text-gray-400\">No image available</span>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"p-6\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <span className=\"bg-blue-100 text-blue-800 px-3 py-1 rounded-full text-sm\">{resource?.type}</span>\r\n          <FavoriteButton resourceId={id} />\r\n        </div>\r\n\r\n        <h1 className=\"text-3xl font-bold mb-4\">{resource?.title}</h1>\r\n\r\n        <div className=\"prose max-w-none\">\r\n          <p className=\"text-lg text-gray-700 mb-6\">{resource?.description}</p>\r\n\r\n          <div className=\"mt-8\" />\r\n\r\n          {resource?.externalUrl && (\r\n            <div className=\"mt-6\">\r\n              <a\r\n                href={resource?.externalUrl}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n                className=\"group bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-6 rounded-lg inline-flex items-center transition-all duration-300\"\r\n              >\r\n                Visit Resource\r\n                <FaExternalLinkAlt className=\"ml-2 transform group-hover:translate-x-1 group-hover:-translate-y-1 transition-transform duration-300\" />\r\n              </a>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/components/AppLayout/AppLayout.tsx",
    "content": "\"use client\";\r\n\r\nimport { ReactNode } from \"react\";\r\nimport Navbar from \"../Navbar\";\r\n\r\ninterface AppLayoutProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport default function AppLayout({ children }: AppLayoutProps) {\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      {children}\r\n    </>\r\n  );\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/components/FavoriteButton.tsx",
    "content": "\"use client\"\r\n\r\nimport { useState } from \"react\"\r\nimport { useFavorites } from \"@/hooks/useFavorites\"\r\n\r\ninterface FavoriteButtonProps {\r\n  resourceId: string\r\n}\r\n\r\nexport default function FavoriteButton({ resourceId }: FavoriteButtonProps) {\r\n  const { isFavorite, loading, toggleFavorite } = useFavorites(resourceId)\r\n  const [isAnimating, setIsAnimating] = useState(false)\r\n\r\n  const handleToggleFavorite = async () => {\r\n    if (loading) return\r\n\r\n    setIsAnimating(true)\r\n\r\n    try {\r\n      await toggleFavorite(resourceId)\r\n    } catch (error) {\r\n      console.error(\"Error toggling favorite:\", error)\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setIsAnimating(false)\r\n    }, 500)\r\n  }\r\n\r\n  return (\r\n    <button\r\n      onClick={handleToggleFavorite}\r\n      disabled={loading}\r\n      className={`relative p-2 rounded-full transition-all duration-300 ${\r\n        loading ? \"opacity-50 cursor-not-allowed\" : \"hover:bg-gray-100\"\r\n      }`}\r\n      aria-label={isFavorite ? \"Quitar de favoritos\" : \"Añadir a favoritos\"}\r\n    >\r\n      <span\r\n        className={`text-2xl transition-all duration-300 ${\r\n          isFavorite ? \"text-red-500\" : \"text-gray-400\"\r\n        } ${isAnimating ? \"scale-125\" : \"scale-100\"} inline-block transform`}\r\n      >\r\n        ♥\r\n      </span>\r\n\r\n\r\n      {isAnimating && <span className=\"absolute inset-0 rounded-full animate-ping bg-red-100 opacity-75\"></span>}\r\n\r\n\r\n      {loading && (\r\n        <span className=\"absolute inset-0 flex items-center justify-center\">\r\n          <span className=\"w-4 h-4 border-2 border-gray-300 border-t-gray-600 rounded-full animate-spin\"></span>\r\n        </span>\r\n      )}\r\n    </button>\r\n  )\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/components/Navbar.tsx",
    "content": "'use client';\r\n\r\nimport Link from 'next/link';\r\nimport { useFavorites } from '@/hooks/useFavorites';\r\n\r\nexport default function Navbar() {\r\n  const { favorites } = useFavorites();\r\n\r\n  return (\r\n    <nav className=\"bg-blue-600 py-4\">\r\n      <div className=\"container mx-auto px-4 flex justify-between items-center\">\r\n        <Link href=\"/\" className=\"text-white text-xl font-bold\">\r\n          Learning Resources\r\n        </Link>\r\n        <div className=\"flex items-center\">\r\n          <Link href=\"/favorites\" className=\"text-white flex items-center\">\r\n            <span>Favorites</span>\r\n            <span className=\"ml-2 bg-white text-blue-600 rounded-full h-6 w-6 flex items-center justify-center text-sm\">\r\n              {favorites.length}\r\n            </span>\r\n          </Link>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/components/ResourceCard.tsx",
    "content": "import Link from \"next/link\"\r\nimport Image from \"next/image\"\r\nimport { FaBookOpen } from \"react-icons/fa\"\r\nimport { getImageUrl } from \"@/utils/image-utils\"\r\n\r\n \r\ninterface Resource {\r\n  id: number\r\n  documentId: string\r\n  title: string\r\n  description: string\r\n  type: string\r\n  coverImage: {\r\n    url?: string\r\n    formats?: {\r\n      medium?: {\r\n        url?: string\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\ninterface ResourceCardProps {\r\n  resource: Resource\r\n}\r\n\r\nexport default function ResourceCard({ resource }: ResourceCardProps) {\r\n  const { documentId, title, coverImage, type, description } = resource\r\n  const imageUrl = coverImage?.url || coverImage?.formats?.medium?.url\r\n\r\n \r\n  const formattedImageUrl = getImageUrl(imageUrl)\r\n\r\n  return (\r\n    <Link href={`/resources/${documentId}`}>\r\n      <div className=\"border rounded-lg overflow-hidden shadow-lg hover:shadow-xl transition-shadow duration-300\">\r\n        <div className=\"relative h-48\">\r\n          {imageUrl ? (\r\n            <Image src={formattedImageUrl || \"/placeholder.svg\"} alt={title} fill className=\"object-cover\" />\r\n          ) : (\r\n            <div className=\"w-full h-full bg-gray-200 flex items-center justify-center\">\r\n              <span className=\"text-gray-400\">No image</span>\r\n            </div>\r\n          )}\r\n          <div className=\"absolute top-2 right-2 bg-blue-600 text-white text-xs px-2 py-1 rounded flex items-center\">\r\n            <FaBookOpen size={16} className=\"mr-1\" />\r\n            {type}\r\n          </div>\r\n        </div>\r\n        <div className=\"p-4\">\r\n          <h3 className=\"text-lg font-semibold line-clamp-1\">{title}</h3>\r\n          <p className=\"text-gray-600 mt-2 text-sm line-clamp-2\">{description}</p>\r\n        </div>\r\n      </div>\r\n    </Link>\r\n  )\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/components/ResourceSkeleton.tsx",
    "content": "export default function ResourceSkeleton() {\r\n  return (\r\n    <div className=\"bg-white rounded-lg shadow-lg overflow-hidden animate-pulse\">\r\n      <div className=\"h-64 sm:h-80 bg-gray-200\"></div>\r\n      <div className=\"p-6\">\r\n        <div className=\"flex justify-between items-center mb-4\">\r\n          <div className=\"h-6 bg-gray-200 rounded-full w-24\"></div>\r\n          <div className=\"h-8 w-8 bg-gray-200 rounded-full\"></div>\r\n        </div>\r\n        <div className=\"h-8 bg-gray-200 rounded mb-4 w-3/4\"></div>\r\n        <div className=\"space-y-3\">\r\n          <div className=\"h-4 bg-gray-200 rounded\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded\"></div>\r\n          <div className=\"h-4 bg-gray-200 rounded w-2/3\"></div>\r\n          <div className=\"h-32 bg-gray-200 rounded mt-8\"></div>\r\n          <div className=\"h-10 bg-gray-200 rounded w-1/3 mt-6\"></div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"
  },
  {
    "path": "next-frontend/src/hooks/useFavorites.ts",
    "content": "'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { Favorite } from '@/types/favorite.types';\r\nimport { getFavorites, addFavorite, removeFavorite, checkFavorite } from '@/services/favorites.service';\r\n\r\nexport const useFavorites = (resourceId?: string) => {\r\n  const [favorites, setFavorites] = useState<Favorite[]>([]);\r\n  const [isFavorite, setIsFavorite] = useState<boolean>(false);\r\n  const [currentFavorite, setCurrentFavorite] = useState<Favorite | null>(null);\r\n  const [loading, setLoading] = useState<boolean>(true);\r\n\r\n  useEffect(() => {\r\n    loadFavorites();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (resourceId) {\r\n      checkIfFavorite(resourceId);\r\n    }\r\n  }, [resourceId]);\r\n\r\n  const loadFavorites = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await getFavorites();\r\n      setFavorites(data);\r\n    } catch (error) {\r\n      console.error('Error loading favorites:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const checkIfFavorite = async (id: string) => {\r\n    try {\r\n      const favorite = await checkFavorite(id);\r\n      setIsFavorite(!!favorite);\r\n      setCurrentFavorite(favorite);\r\n    } catch (error) {\r\n      console.error('Error checking favorite status:', error);\r\n    }\r\n  };\r\n\r\n  const toggleFavorite = async (id: string) => {\r\n    try {\r\n      if (isFavorite && currentFavorite) {\r\n        await removeFavorite(currentFavorite.id);\r\n        setIsFavorite(false);\r\n        setCurrentFavorite(null);\r\n        setFavorites(favorites.filter(fav => fav.id !== currentFavorite.id));\r\n      } else {\r\n        const newFavorite = await addFavorite(id);\r\n        setIsFavorite(true);\r\n        setCurrentFavorite(newFavorite);\r\n        setFavorites([...favorites, newFavorite]);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling favorite:', error);\r\n    }\r\n  };\r\n\r\n  return {\r\n    favorites,\r\n    isFavorite,\r\n    loading,\r\n    toggleFavorite,\r\n    refreshFavorites: loadFavorites,\r\n  };\r\n};\r\n"
  },
  {
    "path": "next-frontend/src/services/favorites.service.ts",
    "content": "import axios from 'axios';\r\nimport { Favorite } from '@/types/favorite.types';\r\n\r\nconst API_URL = process.env.NEXT_PUBLIC_FAVORITES_API_URL;\r\nconst DEFAULT_USER_ID = 'testUser123';\r\n\r\nexport const getFavorites = async (userId = DEFAULT_USER_ID): Promise<Favorite[]> => {\r\n  const response = await axios.get(`${API_URL}/favorites?userId=${userId}`);\r\n  return response.data;\r\n};\r\n\r\nexport const checkFavorite = async (resourceId: string, userId = DEFAULT_USER_ID): Promise<Favorite | null> => {\r\n  try {\r\n    const response = await axios.get(`${API_URL}/favorites/resource/${resourceId}?userId=${userId}`);\r\n    return response.data;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport const addFavorite = async (resourceId: string, userId = DEFAULT_USER_ID): Promise<Favorite> => {\r\n  const response = await axios.post(`${API_URL}/favorites`, { resourceId, userId });\r\n  return response.data;\r\n};\r\n\r\nexport const removeFavorite = async (favoriteId: string): Promise<void> => {\r\n  await axios.delete(`${API_URL}/favorites/${favoriteId}`);\r\n};\r\n"
  },
  {
    "path": "next-frontend/src/services/strapi.service.ts",
    "content": "import axios from \"axios\";\r\nimport type { Resource, ResourcesResponse } from \"@/types/resource.types\";\r\nconst API_URL = process.env.NEXT_PUBLIC_STRAPI_API_URL;\r\nconst STRAPI_URL = process.env.NEXT_PUBLIC_STRAPI_URL;\r\n\r\nexport const getResources = async (): Promise<ResourcesResponse> => {\r\n  try {\r\n    const url = `${API_URL}/resources?populate=coverImage`;\r\n    const response = await axios.get(url);\r\n    if (!response.data) {\r\n      throw new Error(response.data?.error?.message || \"No resources found\");\r\n    }\r\n\r\n    return response.data;\r\n  } catch (error: any) {\r\n    console.error(\"Error fetching resources:\", error.message);\r\n    throw new Error(\"Failed to fetch resources\");\r\n  }\r\n};\r\n\r\nexport const getResourceById = async (id: string): Promise<Resource> => {\r\n  try {\r\n    console.log(\r\n      `Fetching resource with ID: ${id} from ${API_URL}/resources/${id}?populate=coverImage`\r\n    );\r\n\r\n    const response = await axios.get(\r\n      `${API_URL}/resources/${id}?populate=coverImage`\r\n    );\r\n\r\n    if (!response.data) {\r\n      throw new Error(response.data?.error?.message || \"Resource not found\");\r\n    }\r\n\r\n    console.log(\r\n      \"Resource data structure:\",\r\n      JSON.stringify(response.data).substring(0, 200) + \"...\"\r\n    );\r\n\r\n    return response.data.data || response.data;\r\n  } catch (error: any) {\r\n    console.error(`Error fetching resource with ID ${id}:`, error.message);\r\n    throw new Error(\"Failed to fetch resource\");\r\n  }\r\n};\r\n\r\nexport const getImageUrl = (imageUrl: string | undefined): string => {\r\n  if (!imageUrl) return \"/placeholder-image.jpg\";\r\n\r\n  if (imageUrl.startsWith(\"http\")) {\r\n    return imageUrl;\r\n  }\r\n\r\n  return `${STRAPI_URL}${imageUrl}`;\r\n};\r\n"
  },
  {
    "path": "next-frontend/src/types/favorite.types.ts",
    "content": "export interface Favorite {\r\n    id: string;\r\n    resourceId: string;\r\n    userId: string;\r\n    createdAt: Date;\r\n  }\r\n  "
  },
  {
    "path": "next-frontend/src/types/resource.types.ts",
    "content": " \r\nexport interface Content {\r\n  type: string;\r\n  children: Child[];\r\n}\r\nexport interface Child {\r\n  text: string;\r\n  type: string;\r\n}\r\nexport interface CoverImage {\r\n  id: number;\r\n  documentId: string;\r\n  name: string;\r\n  alternativeText: null;\r\n  caption: null;\r\n  width: number;\r\n  height: number;\r\n  formats: Formats;\r\n  hash: string;\r\n  ext: string;\r\n  mime: string;\r\n  size: number;\r\n  url: string;\r\n  previewUrl: null;\r\n  provider: string;\r\n  provider_metadata: null;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  publishedAt: Date;\r\n}\r\nexport interface Formats {\r\n  small: Medium;\r\n  medium: Medium;\r\n  thumbnail: Medium;\r\n}\r\nexport interface Medium {\r\n  ext: string;\r\n  url: string;\r\n  hash: string;\r\n  mime: string;\r\n  name: string;\r\n  path: null;\r\n  size: number;\r\n  width: number;\r\n  height: number;\r\n  sizeInBytes: number;\r\n}\r\nexport interface Meta {\r\n  pagination: Pagination;\r\n}\r\nexport interface Pagination {\r\n  page: number;\r\n  pageSize: number;\r\n  pageCount: number;\r\n  total: number;\r\n}\r\nexport interface Resource {\r\n  id: number;\r\n  documentId: string;\r\n  title: string;\r\n  description: string;\r\n  content: Content[];\r\n  type: string;\r\n  externalUrl: string;\r\n  publishDate: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  publishedAt: Date;\r\n  coverImage: CoverImage;\r\n}\r\nexport interface ResourcesResponse {\r\n  data: Resource[]  \r\n  meta: Meta;\r\n}\r\n\r\n \r\n "
  },
  {
    "path": "next-frontend/src/utils/image-utils.ts",
    "content": "export function getImageUrl(imageUrl: string | undefined): string {\r\n  if (!imageUrl) return \"/placeholder-image.jpg\";\r\n  if (imageUrl.startsWith(\"http\")) {\r\n    return imageUrl;\r\n  }\r\n  const STRAPI_URL =\r\n    process.env.NEXT_PUBLIC_STRAPI_URL || \"http://localhost:1337\";\r\n  return `${STRAPI_URL}${imageUrl}`;\r\n}\r\n"
  },
  {
    "path": "next-frontend/tsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n"
  },
  {
    "path": "README.md",
    "content": "# Learning Resources Catalog - README\n\nThis project is a complete web application consisting of a catalog of learning resources. It includes a frontend built with Next.js, a backend CMS managed by Strapi, a favorites service built with NestJS, and a PostgreSQL database. The entire stack is orchestrated using Docker Compose.\n\n### Project Architecture\n\nThe project consists of the following services:\n\n1.  **Frontend (Next.js):** The main user interface for Browse and viewing learning resources. Runs on port `3000`.\n2.  **CMS (Strapi):** Content management system for administering learning resources. Runs on port `1337`.\n3.  **Favorites Service (NestJS):** A microservice for managing users' favorite resources. Runs on port `3001`.\n4.  **Database (PostgreSQL):** Database used by Strapi to store content. Accessible on port `5432`.\n\n### Prerequisites\n\n* Docker and Docker Compose installed on your system.\n\n### How to Start the Project with Docker\n\nThe easiest way to start all services is using Docker Compose.\n\n1.  **Clone the repository** (if you haven't already).\n2.  **Navigate to the project root** where the `docker-compose.yml` file is located.\n3.  **Run the following command** in your terminal:\n\n    ```bash\n    docker-compose up --build\n    ```\n\n    * `--build`: This flag ensures that the Docker images for the `strapi`, `nextjs`, and `favorites-service` services are built (or rebuilt if they have changed) before starting the containers.\n    * `up`: This command creates and starts the containers defined in `docker-compose.yml`.\n\n4.  **Wait for all services to start.** You will see the logs for each service in your terminal.\n5.  **Access the services:**\n    * **Frontend (Next.js):** Open your browser and go to `http://localhost:3000`.\n    * **CMS (Strapi Admin):** Access `http://localhost:1337/admin`. The first time you access it, you will need to create an administrator account.\n    * **Favorites Service (API):** The API will be available at `http://localhost:3001`. You can view the Swagger documentation at `http://localhost:3001/api`.\n    * **Database (PostgreSQL):** Accessible internally to the other containers at `postgres:5432`.\n\n### Individual Service Development (Without Docker Compose)\n\nIf you prefer to run the services individually for development:\n\n**1. Strapi CMS (`strapi-cms`)**\n\n* Navigate to the `strapi-cms` directory.\n* Install dependencies: `npm install` or `yarn install`.\n* Start in development mode: `npm run develop` or `yarn develop`.\n* Start in production mode: `npm run start` or `yarn start`.\n* You will need to configure the database environment variables manually if not using Docker.\n\n**2. Next.js Frontend (`next-frontend`)**\n\n* Navigate to the `next-frontend` directory.\n* Install dependencies: `npm install` or `yarn install` or `pnpm install`.\n* Start the development server: `npm run dev` or `yarn dev` or `pnpm dev`.\n* Open `http://localhost:3000` in your browser.\n\n**3. NestJS Favorites Service (`nest-favorites-service`)**\n\n* Navigate to the `nest-favorites-service` directory.\n* Install dependencies: `npm install`.\n* Start in development mode (with watch): `npm run start:dev`.\n* Start in production mode: `npm run start:prod`.\n* The service will be available at `http://localhost:3001`.\n\n### Directory Structure (Summary)\n\n├── docker-compose.yml         # Docker services orchestration\n├── nest-favorites-service/    # Favorites Microservice (NestJS)\n│   ├── src/\n│   ├── Dockerfile\n│   └── package.json\n├── next-frontend/             # Frontend Application (Next.js)\n│   ├── src/\n│   ├── public/\n│   ├── Dockerfile\n│   └── package.json\n├── strapi-cms/                # Backend CMS (Strapi)\n│   ├── config/\n│   ├── src/\n│   ├── Dockerfile\n│   └── package.json\n├── postgres-data/             # Volume for PostgreSQL data persistence\n└── README.md                  # This file\n\nTo stop all containers started with `docker-compose up`:\n\n1.  Press `Ctrl + C` in the terminal where you ran `docker-compose up`.\n2.  To ensure containers and networks are removed, run:\n    ```bash\n    docker-compose down\n    ```\n    * If you also want to remove volumes (this will delete database data!), use: `docker-compose down -v`"
  },
  {
    "path": "strapi-cms/.strapi/client/app.js",
    "content": "/**\n * This file was automatically generated by Strapi.\n * Any modifications made will be discarded.\n */\nimport strapiCloud from \"@strapi/plugin-cloud/strapi-admin\";\nimport usersPermissions from \"@strapi/plugin-users-permissions/strapi-admin\";\nimport { renderAdmin } from \"@strapi/strapi/admin\";\n\nrenderAdmin(document.getElementById(\"strapi\"), {\n  plugins: {\n    \"strapi-cloud\": strapiCloud,\n    \"users-permissions\": usersPermissions,\n  },\n});\n"
  },
  {
    "path": "strapi-cms/.strapi-updater.json",
    "content": "{\n\t\"latest\": \"5.12.6\",\n\t\"lastUpdateCheck\": 1745440846152\n}"
  },
  {
    "path": "strapi-cms/config/admin.ts",
    "content": "export default ({ env }) => ({\n  auth: {\n    secret: env('ADMIN_JWT_SECRET'),\n  },\n  apiToken: {\n    salt: env('API_TOKEN_SALT'),\n  },\n  transfer: {\n    token: {\n      salt: env('TRANSFER_TOKEN_SALT'),\n    },\n  },\n  flags: {\n    nps: env.bool('FLAG_NPS', true),\n    promoteEE: env.bool('FLAG_PROMOTE_EE', true),\n  },\n});\n"
  },
  {
    "path": "strapi-cms/config/api.ts",
    "content": "export default {\n  rest: {\n    defaultLimit: 25,\n    maxLimit: 100,\n    withCount: true,\n  },\n};\n"
  },
  {
    "path": "strapi-cms/config/database.ts",
    "content": "import path from 'path';\n\nexport default ({ env }) => {\n  const client = env('DATABASE_CLIENT', 'sqlite');\n\n  const connections = {\n    mysql: {\n      connection: {\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 3306),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool('DATABASE_SSL_REJECT_UNAUTHORIZED', true),\n        },\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    postgres: {\n      connection: {\n        connectionString: env('DATABASE_URL'),\n        host: env('DATABASE_HOST', 'localhost'),\n        port: env.int('DATABASE_PORT', 5432),\n        database: env('DATABASE_NAME', 'strapi'),\n        user: env('DATABASE_USERNAME', 'strapi'),\n        password: env('DATABASE_PASSWORD', 'strapi'),\n        ssl: env.bool('DATABASE_SSL', false) && {\n          key: env('DATABASE_SSL_KEY', undefined),\n          cert: env('DATABASE_SSL_CERT', undefined),\n          ca: env('DATABASE_SSL_CA', undefined),\n          capath: env('DATABASE_SSL_CAPATH', undefined),\n          cipher: env('DATABASE_SSL_CIPHER', undefined),\n          rejectUnauthorized: env.bool('DATABASE_SSL_REJECT_UNAUTHORIZED', true),\n        },\n        schema: env('DATABASE_SCHEMA', 'public'),\n      },\n      pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n    },\n    sqlite: {\n      connection: {\n        filename: path.join(__dirname, '..', '..', env('DATABASE_FILENAME', '.tmp/data.db')),\n      },\n      useNullAsDefault: true,\n    },\n  };\n\n  return {\n    connection: {\n      client,\n      ...connections[client],\n      acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),\n    },\n  };\n};\n"
  },
  {
    "path": "strapi-cms/config/middlewares.ts",
    "content": "export default [\n  'strapi::logger',\n  'strapi::errors',\n  'strapi::security',\n  'strapi::cors',\n  'strapi::poweredBy',\n  'strapi::query',\n  'strapi::body',\n  'strapi::session',\n  'strapi::favicon',\n  'strapi::public',\n];\n"
  },
  {
    "path": "strapi-cms/config/plugins.ts",
    "content": "export default () => ({});\n"
  },
  {
    "path": "strapi-cms/config/server.ts",
    "content": "export default ({ env }) => ({\n  host: env('HOST', '0.0.0.0'),\n  port: env.int('PORT', 1337),\n  app: {\n    keys: env.array('APP_KEYS'),\n  },\n});\n"
  },
  {
    "path": "strapi-cms/dist/config/admin.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ({ env }) => ({\n    auth: {\n        secret: env('ADMIN_JWT_SECRET'),\n    },\n    apiToken: {\n        salt: env('API_TOKEN_SALT'),\n    },\n    transfer: {\n        token: {\n            salt: env('TRANSFER_TOKEN_SALT'),\n        },\n    },\n    flags: {\n        nps: env.bool('FLAG_NPS', true),\n        promoteEE: env.bool('FLAG_PROMOTE_EE', true),\n    },\n});\n"
  },
  {
    "path": "strapi-cms/dist/config/api.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    rest: {\n        defaultLimit: 25,\n        maxLimit: 100,\n        withCount: true,\n    },\n};\n"
  },
  {
    "path": "strapi-cms/dist/config/database.js",
    "content": "\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst path_1 = __importDefault(require(\"path\"));\nexports.default = ({ env }) => {\n    const client = env('DATABASE_CLIENT', 'sqlite');\n    const connections = {\n        mysql: {\n            connection: {\n                host: env('DATABASE_HOST', 'localhost'),\n                port: env.int('DATABASE_PORT', 3306),\n                database: env('DATABASE_NAME', 'strapi'),\n                user: env('DATABASE_USERNAME', 'strapi'),\n                password: env('DATABASE_PASSWORD', 'strapi'),\n                ssl: env.bool('DATABASE_SSL', false) && {\n                    key: env('DATABASE_SSL_KEY', undefined),\n                    cert: env('DATABASE_SSL_CERT', undefined),\n                    ca: env('DATABASE_SSL_CA', undefined),\n                    capath: env('DATABASE_SSL_CAPATH', undefined),\n                    cipher: env('DATABASE_SSL_CIPHER', undefined),\n                    rejectUnauthorized: env.bool('DATABASE_SSL_REJECT_UNAUTHORIZED', true),\n                },\n            },\n            pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n        },\n        postgres: {\n            connection: {\n                connectionString: env('DATABASE_URL'),\n                host: env('DATABASE_HOST', 'localhost'),\n                port: env.int('DATABASE_PORT', 5432),\n                database: env('DATABASE_NAME', 'strapi'),\n                user: env('DATABASE_USERNAME', 'strapi'),\n                password: env('DATABASE_PASSWORD', 'strapi'),\n                ssl: env.bool('DATABASE_SSL', false) && {\n                    key: env('DATABASE_SSL_KEY', undefined),\n                    cert: env('DATABASE_SSL_CERT', undefined),\n                    ca: env('DATABASE_SSL_CA', undefined),\n                    capath: env('DATABASE_SSL_CAPATH', undefined),\n                    cipher: env('DATABASE_SSL_CIPHER', undefined),\n                    rejectUnauthorized: env.bool('DATABASE_SSL_REJECT_UNAUTHORIZED', true),\n                },\n                schema: env('DATABASE_SCHEMA', 'public'),\n            },\n            pool: { min: env.int('DATABASE_POOL_MIN', 2), max: env.int('DATABASE_POOL_MAX', 10) },\n        },\n        sqlite: {\n            connection: {\n                filename: path_1.default.join(__dirname, '..', '..', env('DATABASE_FILENAME', '.tmp/data.db')),\n            },\n            useNullAsDefault: true,\n        },\n    };\n    return {\n        connection: {\n            client,\n            ...connections[client],\n            acquireConnectionTimeout: env.int('DATABASE_CONNECTION_TIMEOUT', 60000),\n        },\n    };\n};\n"
  },
  {
    "path": "strapi-cms/dist/config/middlewares.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = [\n    'strapi::logger',\n    'strapi::errors',\n    'strapi::security',\n    'strapi::cors',\n    'strapi::poweredBy',\n    'strapi::query',\n    'strapi::body',\n    'strapi::session',\n    'strapi::favicon',\n    'strapi::public',\n];\n"
  },
  {
    "path": "strapi-cms/dist/config/plugins.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = () => ({});\n"
  },
  {
    "path": "strapi-cms/dist/config/server.js",
    "content": "\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = ({ env }) => ({\n    host: env('HOST', '0.0.0.0'),\n    port: env.int('PORT', 1337),\n    app: {\n        keys: env.array('APP_KEYS'),\n    },\n});\n"
  },
  {
    "path": "strapi-cms/dist/src/api/resource/content-types/resource/schema.json",
    "content": "{\n    \"kind\": \"collectionType\",\n    \"collectionName\": \"resources\",\n    \"info\": {\n        \"singularName\": \"resource\",\n        \"pluralName\": \"resources\",\n        \"displayName\": \"Resource\"\n    },\n    \"options\": {\n        \"draftAndPublish\": true\n    },\n    \"attributes\": {\n        \"title\": {\n            \"type\": \"string\",\n            \"required\": true\n        },\n        \"description\": {\n            \"type\": \"text\"\n        },\n        \"content\": {\n            \"type\": \"blocks\"\n        },\n        \"type\": {\n            \"type\": \"enumeration\",\n            \"enum\": [\n                \"article\",\n                \"video\",\n                \"tutorial\",\n                \"book\",\n                \"course\"\n            ]\n        },\n        \"coverImage\": {\n            \"allowedTypes\": [\n                \"images\",\n                \"files\",\n                \"videos\",\n                \"audios\"\n            ],\n            \"type\": \"media\",\n            \"multiple\": false\n        },\n        \"externalUrl\": {\n            \"type\": \"string\"\n        },\n        \"publishDate\": {\n            \"type\": \"datetime\"\n        }\n    }\n}\n"
  },
  {
    "path": "strapi-cms/dist/src/api/resource/controllers/resource.js",
    "content": "\"use strict\";\n/**\n * resource controller\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst strapi_1 = require(\"@strapi/strapi\");\nexports.default = strapi_1.factories.createCoreController('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/dist/src/api/resource/routes/resource.js",
    "content": "\"use strict\";\n/**\n * resource router\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst strapi_1 = require(\"@strapi/strapi\");\nexports.default = strapi_1.factories.createCoreRouter('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/dist/src/api/resource/services/resource.js",
    "content": "\"use strict\";\n/**\n * resource service\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst strapi_1 = require(\"@strapi/strapi\");\nexports.default = strapi_1.factories.createCoreService('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/dist/src/index.js",
    "content": "\"use strict\";\n// import type { Core } from '@strapi/strapi';\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = {\n    /**\n     * An asynchronous register function that runs before\n     * your application is initialized.\n     *\n     * This gives you an opportunity to extend code.\n     */\n    register( /* { strapi }: { strapi: Core.Strapi } */) { },\n    /**\n     * An asynchronous bootstrap function that runs before\n     * your application gets started.\n     *\n     * This gives you an opportunity to set up your data model,\n     * run jobs, or perform some special logic.\n     */\n    bootstrap( /* { strapi }: { strapi: Core.Strapi } */) { },\n};\n"
  },
  {
    "path": "strapi-cms/package.json",
    "content": "{\n  \"name\": \"strapi-cms\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"description\": \"A Strapi application\",\n  \"scripts\": {\n    \"build\": \"strapi build\",\n    \"console\": \"strapi console\",\n    \"deploy\": \"strapi deploy\",\n    \"dev\": \"strapi develop\",\n    \"develop\": \"strapi develop\",\n    \"start\": \"strapi start\",\n    \"strapi\": \"strapi\",\n    \"upgrade\": \"npx @strapi/upgrade latest\",\n    \"upgrade:dry\": \"npx @strapi/upgrade latest --dry\"\n  },\n  \"dependencies\": {\n    \"@strapi/plugin-cloud\": \"5.12.5\",\n    \"@strapi/plugin-users-permissions\": \"5.12.5\",\n    \"@strapi/strapi\": \"5.12.5\",\n    \"better-sqlite3\": \"11.3.0\",\n    \"pg\": \"^8.15.1\",\n    \"react\": \"^18.0.0\",\n    \"react-dom\": \"^18.0.0\",\n    \"react-router-dom\": \"^6.0.0\",\n    \"styled-components\": \"^6.0.0\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"typescript\": \"^5\"\n  },\n  \"engines\": {\n    \"node\": \">=18.0.0 <=22.x.x\",\n    \"npm\": \">=6.0.0\"\n  },\n  \"strapi\": {\n    \"uuid\": \"ea98c012-1f16-40c2-b871-27950b95241a\"\n  }\n}\n"
  },
  {
    "path": "strapi-cms/README.md",
    "content": "# 🚀 Getting started with Strapi\n\nStrapi comes with a full featured [Command Line Interface](https://docs.strapi.io/dev-docs/cli) (CLI) which lets you scaffold and manage your project in seconds.\n\n### `develop`\n\nStart your Strapi application with autoReload enabled. [Learn more](https://docs.strapi.io/dev-docs/cli#strapi-develop)\n\n```\nnpm run develop\n# or\nyarn develop\n```\n\n### `start`\n\nStart your Strapi application with autoReload disabled. [Learn more](https://docs.strapi.io/dev-docs/cli#strapi-start)\n\n```\nnpm run start\n# or\nyarn start\n```\n\n### `build`\n\nBuild your admin panel. [Learn more](https://docs.strapi.io/dev-docs/cli#strapi-build)\n\n```\nnpm run build\n# or\nyarn build\n```\n\n## ⚙️ Deployment\n\nStrapi gives you many possible deployment options for your project including [Strapi Cloud](https://cloud.strapi.io). Browse the [deployment section of the documentation](https://docs.strapi.io/dev-docs/deployment) to find the best solution for your use case.\n\n```\nyarn strapi deploy\n```\n\n## 📚 Learn more\n\n- [Resource center](https://strapi.io/resource-center) - Strapi resource center.\n- [Strapi documentation](https://docs.strapi.io) - Official Strapi documentation.\n- [Strapi tutorials](https://strapi.io/tutorials) - List of tutorials made by the core team and the community.\n- [Strapi blog](https://strapi.io/blog) - Official Strapi blog containing articles made by the Strapi team and the community.\n- [Changelog](https://strapi.io/changelog) - Find out about the Strapi product updates, new features and general improvements.\n\nFeel free to check out the [Strapi GitHub repository](https://github.com/strapi/strapi). Your feedback and contributions are welcome!\n\n## ✨ Community\n\n- [Discord](https://discord.strapi.io) - Come chat with the Strapi community including the core team.\n- [Forum](https://forum.strapi.io/) - Place to discuss, ask questions and find answers, show your Strapi project and get feedback or just talk with other Community members.\n- [Awesome Strapi](https://github.com/strapi/awesome-strapi) - A curated list of awesome things related to Strapi.\n\n---\n\n<sub>🤫 Psst! [Strapi is hiring](https://strapi.io/careers).</sub>\n"
  },
  {
    "path": "strapi-cms/src/admin/app.example.tsx",
    "content": "import type { StrapiApp } from '@strapi/strapi/admin';\n\nexport default {\n  config: {\n    locales: [\n      // 'ar',\n      // 'fr',\n      // 'cs',\n      // 'de',\n      // 'dk',\n      // 'es',\n      // 'he',\n      // 'id',\n      // 'it',\n      // 'ja',\n      // 'ko',\n      // 'ms',\n      // 'nl',\n      // 'no',\n      // 'pl',\n      // 'pt-BR',\n      // 'pt',\n      // 'ru',\n      // 'sk',\n      // 'sv',\n      // 'th',\n      // 'tr',\n      // 'uk',\n      // 'vi',\n      // 'zh-Hans',\n      // 'zh',\n    ],\n  },\n  bootstrap(app: StrapiApp) {\n    console.log(app);\n  },\n};\n"
  },
  {
    "path": "strapi-cms/src/admin/tsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"target\": \"ESNext\",\n    \"module\": \"ESNext\",\n    \"moduleResolution\": \"Bundler\",\n    \"useDefineForClassFields\": true,\n    \"lib\": [\"DOM\", \"DOM.Iterable\", \"ESNext\"],\n    \"allowJs\": false,\n    \"skipLibCheck\": true,\n    \"esModuleInterop\": true,\n    \"allowSyntheticDefaultImports\": true,\n    \"strict\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"resolveJsonModule\": true,\n    \"noEmit\": true,\n    \"jsx\": \"react-jsx\"\n  },\n  \"include\": [\"../plugins/**/admin/src/**/*\", \"./\"],\n  \"exclude\": [\"node_modules/\", \"build/\", \"dist/\", \"**/*.test.ts\"]\n}\n"
  },
  {
    "path": "strapi-cms/src/admin/vite.config.example.ts",
    "content": "import { mergeConfig, type UserConfig } from 'vite';\n\nexport default (config: UserConfig) => {\n  // Important: always return the modified config\n  return mergeConfig(config, {\n    resolve: {\n      alias: {\n        '@': '/src',\n      },\n    },\n  });\n};\n"
  },
  {
    "path": "strapi-cms/src/api/resource/content-types/resource/schema.json",
    "content": "{\n  \"kind\": \"collectionType\",\n  \"collectionName\": \"resources\",\n  \"info\": {\n    \"singularName\": \"resource\",\n    \"pluralName\": \"resources\",\n    \"displayName\": \"Resource\"\n  },\n  \"options\": {\n    \"draftAndPublish\": true\n  },\n  \"attributes\": {\n    \"title\": {\n      \"type\": \"string\",\n      \"required\": true\n    },\n    \"description\": {\n      \"type\": \"text\"\n    },\n    \"content\": {\n      \"type\": \"blocks\"\n    },\n    \"type\": {\n      \"type\": \"enumeration\",\n      \"enum\": [\n        \"article\",\n        \"video\",\n        \"tutorial\",\n        \"book\",\n        \"course\"\n      ]\n    },\n    \"coverImage\": {\n      \"allowedTypes\": [\n        \"images\",\n        \"files\",\n        \"videos\",\n        \"audios\"\n      ],\n      \"type\": \"media\",\n      \"multiple\": false\n    },\n    \"externalUrl\": {\n      \"type\": \"string\"\n    },\n    \"publishDate\": {\n      \"type\": \"datetime\"\n    }\n  }\n}\n"
  },
  {
    "path": "strapi-cms/src/api/resource/controllers/resource.ts",
    "content": "/**\n * resource controller\n */\n\nimport { factories } from '@strapi/strapi'\n\nexport default factories.createCoreController('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/src/api/resource/routes/resource.ts",
    "content": "/**\n * resource router\n */\n\nimport { factories } from '@strapi/strapi';\n\nexport default factories.createCoreRouter('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/src/api/resource/services/resource.ts",
    "content": "/**\n * resource service\n */\n\nimport { factories } from '@strapi/strapi';\n\nexport default factories.createCoreService('api::resource.resource');\n"
  },
  {
    "path": "strapi-cms/src/index.ts",
    "content": "// import type { Core } from '@strapi/strapi';\n\nexport default {\n  /**\n   * An asynchronous register function that runs before\n   * your application is initialized.\n   *\n   * This gives you an opportunity to extend code.\n   */\n  register(/* { strapi }: { strapi: Core.Strapi } */) {},\n\n  /**\n   * An asynchronous bootstrap function that runs before\n   * your application gets started.\n   *\n   * This gives you an opportunity to set up your data model,\n   * run jobs, or perform some special logic.\n   */\n  bootstrap(/* { strapi }: { strapi: Core.Strapi } */) {},\n};\n"
  },
  {
    "path": "strapi-cms/tsconfig.json",
    "content": "{\n  \"compilerOptions\": {\n    \"module\": \"CommonJS\",\n    \"moduleResolution\": \"Node\",\n    \"lib\": [\"ES2020\"],\n    \"target\": \"ES2019\",\n    \"strict\": false,\n    \"skipLibCheck\": true,\n    \"forceConsistentCasingInFileNames\": true,\n    \"incremental\": true,\n    \"esModuleInterop\": true,\n    \"resolveJsonModule\": true,\n    \"noEmitOnError\": true,\n    \"noImplicitThis\": true,\n    \"outDir\": \"dist\",\n    \"rootDir\": \".\"\n  },\n  \"include\": [\n    // Include root files\n    \"./\",\n    // Include all ts files\n    \"./**/*.ts\",\n    // Include all js files\n    \"./**/*.js\",\n    // Force the JSON files in the src folder to be included\n    \"src/**/*.json\"\n  ],\n\n  \"exclude\": [\n    \"node_modules/\",\n    \"build/\",\n    \"dist/\",\n    \".cache/\",\n    \".tmp/\",\n\n    // Do not include admin files in the server compilation\n    \"src/admin/\",\n    // Do not include test files\n    \"**/*.test.*\",\n    // Do not include plugins in the server compilation\n    \"src/plugins/**\"\n  ]\n}\n"
  },
  {
    "path": "strapi-cms/types/generated/components.d.ts",
    "content": "/*\n * The app doesn't have any components yet.\n */\n"
  },
  {
    "path": "strapi-cms/types/generated/contentTypes.d.ts",
    "content": "import type { Schema, Struct } from '@strapi/strapi';\n\nexport interface AdminApiToken extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_api_tokens';\n  info: {\n    description: '';\n    displayName: 'Api Token';\n    name: 'Api Token';\n    pluralName: 'api-tokens';\n    singularName: 'api-token';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    accessKey: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    description: Schema.Attribute.String &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }> &\n      Schema.Attribute.DefaultTo<''>;\n    expiresAt: Schema.Attribute.DateTime;\n    lastUsedAt: Schema.Attribute.DateTime;\n    lifespan: Schema.Attribute.BigInteger;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<'oneToMany', 'admin::api-token'> &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    permissions: Schema.Attribute.Relation<\n      'oneToMany',\n      'admin::api-token-permission'\n    >;\n    publishedAt: Schema.Attribute.DateTime;\n    type: Schema.Attribute.Enumeration<['read-only', 'full-access', 'custom']> &\n      Schema.Attribute.Required &\n      Schema.Attribute.DefaultTo<'read-only'>;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface AdminApiTokenPermission extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_api_token_permissions';\n  info: {\n    description: '';\n    displayName: 'API Token Permission';\n    name: 'API Token Permission';\n    pluralName: 'api-token-permissions';\n    singularName: 'api-token-permission';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    action: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'admin::api-token-permission'\n    > &\n      Schema.Attribute.Private;\n    publishedAt: Schema.Attribute.DateTime;\n    token: Schema.Attribute.Relation<'manyToOne', 'admin::api-token'>;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface AdminPermission extends Struct.CollectionTypeSchema {\n  collectionName: 'admin_permissions';\n  info: {\n    description: '';\n    displayName: 'Permission';\n    name: 'Permission';\n    pluralName: 'permissions';\n    singularName: 'permission';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    action: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    actionParameters: Schema.Attribute.JSON & Schema.Attribute.DefaultTo<{}>;\n    conditions: Schema.Attribute.JSON & Schema.Attribute.DefaultTo<[]>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<'oneToMany', 'admin::permission'> &\n      Schema.Attribute.Private;\n    properties: Schema.Attribute.JSON & Schema.Attribute.DefaultTo<{}>;\n    publishedAt: Schema.Attribute.DateTime;\n    role: Schema.Attribute.Relation<'manyToOne', 'admin::role'>;\n    subject: Schema.Attribute.String &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface AdminRole extends Struct.CollectionTypeSchema {\n  collectionName: 'admin_roles';\n  info: {\n    description: '';\n    displayName: 'Role';\n    name: 'Role';\n    pluralName: 'roles';\n    singularName: 'role';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    code: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    description: Schema.Attribute.String;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<'oneToMany', 'admin::role'> &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    permissions: Schema.Attribute.Relation<'oneToMany', 'admin::permission'>;\n    publishedAt: Schema.Attribute.DateTime;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    users: Schema.Attribute.Relation<'manyToMany', 'admin::user'>;\n  };\n}\n\nexport interface AdminTransferToken extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_transfer_tokens';\n  info: {\n    description: '';\n    displayName: 'Transfer Token';\n    name: 'Transfer Token';\n    pluralName: 'transfer-tokens';\n    singularName: 'transfer-token';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    accessKey: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    description: Schema.Attribute.String &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }> &\n      Schema.Attribute.DefaultTo<''>;\n    expiresAt: Schema.Attribute.DateTime;\n    lastUsedAt: Schema.Attribute.DateTime;\n    lifespan: Schema.Attribute.BigInteger;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'admin::transfer-token'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    permissions: Schema.Attribute.Relation<\n      'oneToMany',\n      'admin::transfer-token-permission'\n    >;\n    publishedAt: Schema.Attribute.DateTime;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface AdminTransferTokenPermission\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_transfer_token_permissions';\n  info: {\n    description: '';\n    displayName: 'Transfer Token Permission';\n    name: 'Transfer Token Permission';\n    pluralName: 'transfer-token-permissions';\n    singularName: 'transfer-token-permission';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    action: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'admin::transfer-token-permission'\n    > &\n      Schema.Attribute.Private;\n    publishedAt: Schema.Attribute.DateTime;\n    token: Schema.Attribute.Relation<'manyToOne', 'admin::transfer-token'>;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface AdminUser extends Struct.CollectionTypeSchema {\n  collectionName: 'admin_users';\n  info: {\n    description: '';\n    displayName: 'User';\n    name: 'User';\n    pluralName: 'users';\n    singularName: 'user';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    blocked: Schema.Attribute.Boolean &\n      Schema.Attribute.Private &\n      Schema.Attribute.DefaultTo<false>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    email: Schema.Attribute.Email &\n      Schema.Attribute.Required &\n      Schema.Attribute.Private &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 6;\n      }>;\n    firstname: Schema.Attribute.String &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    isActive: Schema.Attribute.Boolean &\n      Schema.Attribute.Private &\n      Schema.Attribute.DefaultTo<false>;\n    lastname: Schema.Attribute.String &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<'oneToMany', 'admin::user'> &\n      Schema.Attribute.Private;\n    password: Schema.Attribute.Password &\n      Schema.Attribute.Private &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 6;\n      }>;\n    preferedLanguage: Schema.Attribute.String;\n    publishedAt: Schema.Attribute.DateTime;\n    registrationToken: Schema.Attribute.String & Schema.Attribute.Private;\n    resetPasswordToken: Schema.Attribute.String & Schema.Attribute.Private;\n    roles: Schema.Attribute.Relation<'manyToMany', 'admin::role'> &\n      Schema.Attribute.Private;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    username: Schema.Attribute.String;\n  };\n}\n\nexport interface ApiResourceResource extends Struct.CollectionTypeSchema {\n  collectionName: 'resources';\n  info: {\n    displayName: 'Resource';\n    pluralName: 'resources';\n    singularName: 'resource';\n  };\n  options: {\n    draftAndPublish: true;\n  };\n  attributes: {\n    content: Schema.Attribute.Blocks;\n    coverImage: Schema.Attribute.Media<\n      'images' | 'files' | 'videos' | 'audios'\n    >;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    description: Schema.Attribute.Text;\n    externalUrl: Schema.Attribute.String;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'api::resource.resource'\n    > &\n      Schema.Attribute.Private;\n    publishDate: Schema.Attribute.DateTime;\n    publishedAt: Schema.Attribute.DateTime;\n    title: Schema.Attribute.String & Schema.Attribute.Required;\n    type: Schema.Attribute.Enumeration<\n      ['article', 'video', 'tutorial', 'book', 'course']\n    >;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginContentReleasesRelease\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_releases';\n  info: {\n    displayName: 'Release';\n    pluralName: 'releases';\n    singularName: 'release';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    actions: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::content-releases.release-action'\n    >;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::content-releases.release'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String & Schema.Attribute.Required;\n    publishedAt: Schema.Attribute.DateTime;\n    releasedAt: Schema.Attribute.DateTime;\n    scheduledAt: Schema.Attribute.DateTime;\n    status: Schema.Attribute.Enumeration<\n      ['ready', 'blocked', 'failed', 'done', 'empty']\n    > &\n      Schema.Attribute.Required;\n    timezone: Schema.Attribute.String;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginContentReleasesReleaseAction\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_release_actions';\n  info: {\n    displayName: 'Release Action';\n    pluralName: 'release-actions';\n    singularName: 'release-action';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    contentType: Schema.Attribute.String & Schema.Attribute.Required;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    entryDocumentId: Schema.Attribute.String;\n    isEntryValid: Schema.Attribute.Boolean;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::content-releases.release-action'\n    > &\n      Schema.Attribute.Private;\n    publishedAt: Schema.Attribute.DateTime;\n    release: Schema.Attribute.Relation<\n      'manyToOne',\n      'plugin::content-releases.release'\n    >;\n    type: Schema.Attribute.Enumeration<['publish', 'unpublish']> &\n      Schema.Attribute.Required;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginI18NLocale extends Struct.CollectionTypeSchema {\n  collectionName: 'i18n_locale';\n  info: {\n    collectionName: 'locales';\n    description: '';\n    displayName: 'Locale';\n    pluralName: 'locales';\n    singularName: 'locale';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    code: Schema.Attribute.String & Schema.Attribute.Unique;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::i18n.locale'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.SetMinMax<\n        {\n          max: 50;\n          min: 1;\n        },\n        number\n      >;\n    publishedAt: Schema.Attribute.DateTime;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginReviewWorkflowsWorkflow\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_workflows';\n  info: {\n    description: '';\n    displayName: 'Workflow';\n    name: 'Workflow';\n    pluralName: 'workflows';\n    singularName: 'workflow';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    contentTypes: Schema.Attribute.JSON &\n      Schema.Attribute.Required &\n      Schema.Attribute.DefaultTo<'[]'>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::review-workflows.workflow'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique;\n    publishedAt: Schema.Attribute.DateTime;\n    stageRequiredToPublish: Schema.Attribute.Relation<\n      'oneToOne',\n      'plugin::review-workflows.workflow-stage'\n    >;\n    stages: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::review-workflows.workflow-stage'\n    >;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginReviewWorkflowsWorkflowStage\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'strapi_workflows_stages';\n  info: {\n    description: '';\n    displayName: 'Stages';\n    name: 'Workflow Stage';\n    pluralName: 'workflow-stages';\n    singularName: 'workflow-stage';\n  };\n  options: {\n    draftAndPublish: false;\n    version: '1.1.0';\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    color: Schema.Attribute.String & Schema.Attribute.DefaultTo<'#4945FF'>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::review-workflows.workflow-stage'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String;\n    permissions: Schema.Attribute.Relation<'manyToMany', 'admin::permission'>;\n    publishedAt: Schema.Attribute.DateTime;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    workflow: Schema.Attribute.Relation<\n      'manyToOne',\n      'plugin::review-workflows.workflow'\n    >;\n  };\n}\n\nexport interface PluginUploadFile extends Struct.CollectionTypeSchema {\n  collectionName: 'files';\n  info: {\n    description: '';\n    displayName: 'File';\n    pluralName: 'files';\n    singularName: 'file';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    alternativeText: Schema.Attribute.String;\n    caption: Schema.Attribute.String;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    ext: Schema.Attribute.String;\n    folder: Schema.Attribute.Relation<'manyToOne', 'plugin::upload.folder'> &\n      Schema.Attribute.Private;\n    folderPath: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Private &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    formats: Schema.Attribute.JSON;\n    hash: Schema.Attribute.String & Schema.Attribute.Required;\n    height: Schema.Attribute.Integer;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::upload.file'\n    > &\n      Schema.Attribute.Private;\n    mime: Schema.Attribute.String & Schema.Attribute.Required;\n    name: Schema.Attribute.String & Schema.Attribute.Required;\n    previewUrl: Schema.Attribute.String;\n    provider: Schema.Attribute.String & Schema.Attribute.Required;\n    provider_metadata: Schema.Attribute.JSON;\n    publishedAt: Schema.Attribute.DateTime;\n    related: Schema.Attribute.Relation<'morphToMany'>;\n    size: Schema.Attribute.Decimal & Schema.Attribute.Required;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    url: Schema.Attribute.String & Schema.Attribute.Required;\n    width: Schema.Attribute.Integer;\n  };\n}\n\nexport interface PluginUploadFolder extends Struct.CollectionTypeSchema {\n  collectionName: 'upload_folders';\n  info: {\n    displayName: 'Folder';\n    pluralName: 'folders';\n    singularName: 'folder';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    children: Schema.Attribute.Relation<'oneToMany', 'plugin::upload.folder'>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    files: Schema.Attribute.Relation<'oneToMany', 'plugin::upload.file'>;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::upload.folder'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    parent: Schema.Attribute.Relation<'manyToOne', 'plugin::upload.folder'>;\n    path: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 1;\n      }>;\n    pathId: Schema.Attribute.Integer &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique;\n    publishedAt: Schema.Attribute.DateTime;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginUsersPermissionsPermission\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'up_permissions';\n  info: {\n    description: '';\n    displayName: 'Permission';\n    name: 'permission';\n    pluralName: 'permissions';\n    singularName: 'permission';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    action: Schema.Attribute.String & Schema.Attribute.Required;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::users-permissions.permission'\n    > &\n      Schema.Attribute.Private;\n    publishedAt: Schema.Attribute.DateTime;\n    role: Schema.Attribute.Relation<\n      'manyToOne',\n      'plugin::users-permissions.role'\n    >;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n  };\n}\n\nexport interface PluginUsersPermissionsRole\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'up_roles';\n  info: {\n    description: '';\n    displayName: 'Role';\n    name: 'role';\n    pluralName: 'roles';\n    singularName: 'role';\n  };\n  options: {\n    draftAndPublish: false;\n  };\n  pluginOptions: {\n    'content-manager': {\n      visible: false;\n    };\n    'content-type-builder': {\n      visible: false;\n    };\n  };\n  attributes: {\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    description: Schema.Attribute.String;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::users-permissions.role'\n    > &\n      Schema.Attribute.Private;\n    name: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 3;\n      }>;\n    permissions: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::users-permissions.permission'\n    >;\n    publishedAt: Schema.Attribute.DateTime;\n    type: Schema.Attribute.String & Schema.Attribute.Unique;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    users: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::users-permissions.user'\n    >;\n  };\n}\n\nexport interface PluginUsersPermissionsUser\n  extends Struct.CollectionTypeSchema {\n  collectionName: 'up_users';\n  info: {\n    description: '';\n    displayName: 'User';\n    name: 'user';\n    pluralName: 'users';\n    singularName: 'user';\n  };\n  options: {\n    draftAndPublish: false;\n    timestamps: true;\n  };\n  attributes: {\n    blocked: Schema.Attribute.Boolean & Schema.Attribute.DefaultTo<false>;\n    confirmationToken: Schema.Attribute.String & Schema.Attribute.Private;\n    confirmed: Schema.Attribute.Boolean & Schema.Attribute.DefaultTo<false>;\n    createdAt: Schema.Attribute.DateTime;\n    createdBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    email: Schema.Attribute.Email &\n      Schema.Attribute.Required &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 6;\n      }>;\n    locale: Schema.Attribute.String & Schema.Attribute.Private;\n    localizations: Schema.Attribute.Relation<\n      'oneToMany',\n      'plugin::users-permissions.user'\n    > &\n      Schema.Attribute.Private;\n    password: Schema.Attribute.Password &\n      Schema.Attribute.Private &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 6;\n      }>;\n    provider: Schema.Attribute.String;\n    publishedAt: Schema.Attribute.DateTime;\n    resetPasswordToken: Schema.Attribute.String & Schema.Attribute.Private;\n    role: Schema.Attribute.Relation<\n      'manyToOne',\n      'plugin::users-permissions.role'\n    >;\n    updatedAt: Schema.Attribute.DateTime;\n    updatedBy: Schema.Attribute.Relation<'oneToOne', 'admin::user'> &\n      Schema.Attribute.Private;\n    username: Schema.Attribute.String &\n      Schema.Attribute.Required &\n      Schema.Attribute.Unique &\n      Schema.Attribute.SetMinMaxLength<{\n        minLength: 3;\n      }>;\n  };\n}\n\ndeclare module '@strapi/strapi' {\n  export module Public {\n    export interface ContentTypeSchemas {\n      'admin::api-token': AdminApiToken;\n      'admin::api-token-permission': AdminApiTokenPermission;\n      'admin::permission': AdminPermission;\n      'admin::role': AdminRole;\n      'admin::transfer-token': AdminTransferToken;\n      'admin::transfer-token-permission': AdminTransferTokenPermission;\n      'admin::user': AdminUser;\n      'api::resource.resource': ApiResourceResource;\n      'plugin::content-releases.release': PluginContentReleasesRelease;\n      'plugin::content-releases.release-action': PluginContentReleasesReleaseAction;\n      'plugin::i18n.locale': PluginI18NLocale;\n      'plugin::review-workflows.workflow': PluginReviewWorkflowsWorkflow;\n      'plugin::review-workflows.workflow-stage': PluginReviewWorkflowsWorkflowStage;\n      'plugin::upload.file': PluginUploadFile;\n      'plugin::upload.folder': PluginUploadFolder;\n      'plugin::users-permissions.permission': PluginUsersPermissionsPermission;\n      'plugin::users-permissions.role': PluginUsersPermissionsRole;\n      'plugin::users-permissions.user': PluginUsersPermissionsUser;\n    }\n  }\n}\n"
  }
]